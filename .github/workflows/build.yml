on:
  push:
    branches: [ main ]
  pull_request:

  workflow_call:
    inputs:
      tag_name:
        type: string
      draft:
        type: string
      prerelease:
        type: string
      generate_release_notes:
        type: string

jobs:
  build:
    name: build
    # The build job has a matrix strategy, which means it will run multiple times with different combinations of the os, arch, and target variables.
    strategy:
      fail-fast: false
      matrix:
        include:
          # The first combination is Ubuntu running on an AMD64 processor, building for Windows.
          - os: ubuntu-latest
            arch: amd64
            target: windows
            ext: .exe
            cc: x86_64-w64-mingw32-gcc
            ldflags: "-H windowsgui"

          # The second combination is Ubuntu running on an AMD64 processor, building for Linux.
          - os: ubuntu-20.04
            arch: amd64
            target: linux

          # The third combination is macOS running on an AMD64 processor, building for Darwin (macOS).
          - os: macos-latest
            arch: amd64
            target: darwin
            cgo_ldflags: "-framework UniformTypeIdentifiers -F /System/Library/Frameworks"

          # The fourth combination is macOS running on an ARM64 processor, building for Darwin (macOS).
          - os: macos-latest
            arch: arm64
            target: darwin
            cgo_ldflags: "-framework UniformTypeIdentifiers -F /System/Library/Frameworks"


    # The build job runs on the specified operating system.
    runs-on: ${{ matrix.os }}
    env:
      TARGET_NAME: wallet-plugin_${{ matrix.target }}-${{ matrix.arch }}
    steps:
      # The first step checks out the repository.
      - uses: actions/checkout@v3
      # The second step install the tools.
      - uses: ./.github/actions/install
        with:
          os: ${{ matrix.os }}
      # The third step builds the binary and prepares an archive for publishing.
      - name: Build binary and prepare archive for publish
        shell: bash
        run: |
          export GOOS=${{ matrix.target }}
          export GOARCH=${{ matrix.arch }}
          export CGO_ENABLED=1
          export CC=${{ matrix.cc }}
          export CGO_LDFLAGS="${{ matrix.cgo_ldflags }}"
          go build -tags desktop,production -ldflags "-w -s ${{ matrix.ldflags }}" -o $TARGET_NAME${{ matrix.ext }} main.go
      - name: copy the logo
        run: cp web/html/wallet.svg .
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TARGET_NAME }}
          path: |
            ${{ env.TARGET_NAME }}${{ matrix.ext }}
            wallet.svg
            manifest.json
      - name: Zip binary
        if: ${{ inputs.tag_name != '' }}
        run: zip $TARGET_NAME.zip $TARGET_NAME${{ matrix.ext }} wallet.svg manifest.json
      - name: Create release and upload binaries
        if: ${{ inputs.tag_name != '' }}
        uses: softprops/action-gh-release@v1
        with:
          target_commitish: ${{ github.sha }}
          tag_name: ${{ inputs.tag_name }}
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}
          generate_release_notes: ${{ inputs.generate_release_notes }}
          files: "*.zip"
