name: Build

on:
  push:

  workflow_call:
    inputs:
      tag_name:
        type: string
      draft:
        type: string
      prerelease:
        type: string
      generate_release_notes:
        type: string

jobs:
  build:
    name: Build binaries
    # The build job has a matrix strategy, which means it will run multiple times with different combinations of the os, arch, and target variables.
    strategy:
      fail-fast: false
      matrix:
        include:
          # The first combination is Ubuntu running on an AMD64 processor, building for Windows.
          - os: ubuntu-24.04
            arch: amd64
            target: windows
            ext: .exe
            cc: x86_64-w64-mingw32-gcc
            ldflags: "-H windowsgui"

          # The second combination is Ubuntu running on an AMD64 processor, building for Linux.
          - os: ubuntu-24.04
            arch: amd64
            target: linux

          # The third combination is macOS running on an AMD64 processor, building for Darwin (macOS).
          - os: macos-13
            arch: amd64
            target: darwin
            cgo_ldflags: "-framework UniformTypeIdentifiers -F /System/Library/Frameworks"

          # The fourth combination is macOS running on an ARM64 processor, building for Darwin (macOS).
          - os: macos-13
            arch: arm64
            target: darwin
            cgo_ldflags: "-framework UniformTypeIdentifiers -F /System/Library/Frameworks"

    # The build job runs on the specified operating system.
    runs-on: ${{ matrix.os }}
    env:
      TARGET_NAME: wallet-plugin_${{ matrix.target }}-${{ matrix.arch }}
      GOOS: ${{ matrix.target }}
      GOARCH: ${{ matrix.arch }}
      CGO_ENABLED: 1
      CC: ${{ matrix.cc }}
      CGO_LDFLAGS: ${{ matrix.cgo_ldflags }}
      TAG: ${{ inputs.tag_name }}
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install
        with:
          os: ${{ matrix.os }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build binary for ${{ matrix.target }} ${{ matrix.arch }}
        if: matrix.target != 'darwin'
        shell: bash
        run: |
          TAGS="desktop,production"
          if [ "${{ matrix.target }}" == "linux" ]; then
            TAGS="$TAGS,webkit2_41"
          fi
          go build -tags "$TAGS" -ldflags "-w -s ${{ matrix.ldflags }}" -o $TARGET_NAME${{ matrix.ext }} main.go

      - name: Build binary for MacOS ${{ matrix.arch }}
        if: matrix.target == 'darwin'
        shell: bash
        run: |
          task build
          chmod +x build/bin/*/Contents/MacOS/*
          ditto -c -k build/bin/wallet-plugin.app wallet-plugin.app.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARGET_NAME }}
          path: |
            wallet-plugin*
            wallet.svg
            manifest.json

  sign-windows-binary:
    name: Sign Windows binary
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: wallet-plugin_windows-amd64
          path: ./windows-binaries

      - name: Sign Windows binary
        uses: massalabs/station/.github/actions/sign-file-digicert@5df87a2186634dc2553605ef0d3f555d3552705f
        with:
          file: ./windows-binaries/wallet-plugin_windows-amd64.exe
          SM_API_KEY: ${{ secrets.SM_API_KEY }}
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
          SM_CERT_FINGERPRINT: ${{ secrets.SM_CERT_FINGERPRINT }}
          SM_HOST: ${{ secrets.SM_HOST }}

      - name: Upload signed Windows binary (overwrite original)
        uses: actions/upload-artifact@v4
        with:
          name: wallet-plugin_windows-amd64
          path: ./windows-binaries/wallet-plugin_windows-amd64.exe
          overwrite: true

  package-and-publish-release:
    name: Package and publish release
    needs: [build, sign-windows-binary]
    runs-on: ubuntu-latest
    if: ${{ inputs.tag_name != '' }}
    permissions:
      contents: write
      id-token: write
    steps:

      - name: Download additional files
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            wallet.svg
            manifest.json

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          pattern: wallet-plugin_*
          merge-multiple: true
          path: ./binaries

      - name: Create packages
        run: |
          cd binaries
          for file in wallet-plugin_*; do
            if [[ $file == *.exe ]]; then
              zip "${file%.exe}.zip" "$file" ../wallet.svg ../manifest.json
            elif [[ $file == *.app.zip ]]; then
              # For Darwin, create separate zip files for amd64 and arm64
              zip "wallet-plugin_darwin-amd64.zip" "$file" ../wallet.svg ../manifest.json
              cp wallet-plugin_darwin-amd64.zip wallet-plugin_darwin-arm64.zip
            else
              zip "${file}.zip" "$file" ../wallet.svg ../manifest.json
            fi
          done

      - name: Create release and upload binaries
        uses: softprops/action-gh-release@v1
        with:
          target_commitish: ${{ github.sha }}
          tag_name: ${{ inputs.tag_name }}
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}
          generate_release_notes: ${{ inputs.generate_release_notes }}
          files: binaries/*.zip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-3
          aws-access-key-id: ${{ secrets.MS_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.MS_S3_SECRET_ACCESS_KEY }}

      - name: Upload to S3
        run: |
          for file in binaries/*.zip; do
            filename=$(basename "$file")
            aws s3 cp "$file" "s3://${{ vars.MS_S3_BUCKET }}/plugins/wallet/${{ inputs.tag_name }}/${filename}"
          done
