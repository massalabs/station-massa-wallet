// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EditAccountRequest Account object (V0).
//
// swagger:model EditAccountRequest
type EditAccountRequest struct {

	// address
	Address Address `json:"address,omitempty"`

	// balance
	Balance Amount `json:"balance,omitempty"`

	// candidate balance
	CandidateBalance Amount `json:"candidateBalance,omitempty"`

	// key pair
	KeyPair KeyPair `json:"keyPair,omitempty"`

	// nickname
	// Required: true
	Nickname Nickname `json:"nickname"`
}

// Validate validates this edit account request
func (m *EditAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCandidateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyPair(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EditAccountRequest) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := m.Address.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("address")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("address")
		}
		return err
	}

	return nil
}

func (m *EditAccountRequest) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if err := m.Balance.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("balance")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("balance")
		}
		return err
	}

	return nil
}

func (m *EditAccountRequest) validateCandidateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.CandidateBalance) { // not required
		return nil
	}

	if err := m.CandidateBalance.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("candidateBalance")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("candidateBalance")
		}
		return err
	}

	return nil
}

func (m *EditAccountRequest) validateKeyPair(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyPair) { // not required
		return nil
	}

	if err := m.KeyPair.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("keyPair")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("keyPair")
		}
		return err
	}

	return nil
}

func (m *EditAccountRequest) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("nickname", "body", Nickname(m.Nickname)); err != nil {
		return err
	}

	if err := m.Nickname.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nickname")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("nickname")
		}
		return err
	}

	return nil
}

// ContextValidate validate this edit account request based on the context it is used
func (m *EditAccountRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCandidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyPair(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNickname(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EditAccountRequest) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Address.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("address")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("address")
		}
		return err
	}

	return nil
}

func (m *EditAccountRequest) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Balance.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("balance")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("balance")
		}
		return err
	}

	return nil
}

func (m *EditAccountRequest) contextValidateCandidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CandidateBalance.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("candidateBalance")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("candidateBalance")
		}
		return err
	}

	return nil
}

func (m *EditAccountRequest) contextValidateKeyPair(ctx context.Context, formats strfmt.Registry) error {

	if err := m.KeyPair.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("keyPair")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("keyPair")
		}
		return err
	}

	return nil
}

func (m *EditAccountRequest) contextValidateNickname(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Nickname.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nickname")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("nickname")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EditAccountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EditAccountRequest) UnmarshalBinary(b []byte) error {
	var res EditAccountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
