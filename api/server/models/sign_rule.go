// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignRule Account Sign rule.
//
// swagger:model SignRule
type SignRule struct {

	// auto sign
	// Required: true
	AutoSign *bool `json:"autoSign"`

	// contract
	// Required: true
	Contract *string `json:"contract"`

	// password prompt
	// Required: true
	PasswordPrompt *bool `json:"passwordPrompt"`
}

// Validate validates this sign rule
func (m *SignRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoSign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordPrompt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignRule) validateAutoSign(formats strfmt.Registry) error {

	if err := validate.Required("autoSign", "body", m.AutoSign); err != nil {
		return err
	}

	return nil
}

func (m *SignRule) validateContract(formats strfmt.Registry) error {

	if err := validate.Required("contract", "body", m.Contract); err != nil {
		return err
	}

	return nil
}

func (m *SignRule) validatePasswordPrompt(formats strfmt.Registry) error {

	if err := validate.Required("passwordPrompt", "body", m.PasswordPrompt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sign rule based on context it is used
func (m *SignRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SignRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignRule) UnmarshalBinary(b []byte) error {
	var res SignRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
