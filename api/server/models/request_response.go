// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestResponse request response
//
// swagger:model RequestResponse
type RequestResponse struct {

	// result
	// Read Only: true
	// Enum: ["approved","denied","error"]
	Result string `json:"result,omitempty"`
}

// Validate validates this request response
func (m *RequestResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestResponseTypeResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["approved","denied","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestResponseTypeResultPropEnum = append(requestResponseTypeResultPropEnum, v)
	}
}

const (

	// RequestResponseResultApproved captures enum value "approved"
	RequestResponseResultApproved string = "approved"

	// RequestResponseResultDenied captures enum value "denied"
	RequestResponseResultDenied string = "denied"

	// RequestResponseResultError captures enum value "error"
	RequestResponseResultError string = "error"
)

// prop value enum
func (m *RequestResponse) validateResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestResponseTypeResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestResponse) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultEnum("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this request response based on the context it is used
func (m *RequestResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestResponse) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "result", "body", string(m.Result)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestResponse) UnmarshalBinary(b []byte) error {
	var res RequestResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
