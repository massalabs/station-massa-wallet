// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyPair Account's key pair.
//
// swagger:model KeyPair
type KeyPair struct {

	// Nonce used by the AES-GCM algorithm used to protect the key pair's private key.
	// Required: true
	Nonce string `json:"nonce"`

	// Key pair's private key.
	// Required: true
	PrivateKey string `json:"privateKey"`

	// Key pair's public key.
	// Required: true
	PublicKey string `json:"publicKey"`

	// Salt used by the PBKDF that generates the secret key used to protect the key pair's private key.
	// Required: true
	Salt string `json:"salt"`
}

// Validate validates this key pair
func (m *KeyPair) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyPair) validateNonce(formats strfmt.Registry) error {

	if err := validate.RequiredString("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *KeyPair) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.RequiredString("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *KeyPair) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.RequiredString("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

func (m *KeyPair) validateSalt(formats strfmt.Registry) error {

	if err := validate.RequiredString("salt", "body", m.Salt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this key pair based on context it is used
func (m *KeyPair) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KeyPair) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyPair) UnmarshalBinary(b []byte) error {
	var res KeyPair
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
