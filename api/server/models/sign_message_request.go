// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignMessageRequest sign message request
//
// swagger:model SignMessageRequest
type SignMessageRequest struct {

	// A boolean indicating whether to display data.
	DisplayData *bool `json:"DisplayData,omitempty"`

	// Description text of what is being signed (optional)
	// Max Length: 280
	Description string `json:"description,omitempty"`

	// The message to sign.
	Message string `json:"message,omitempty"`
}

// Validate validates this sign message request
func (m *SignMessageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignMessageRequest) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 280); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sign message request based on context it is used
func (m *SignMessageRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SignMessageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignMessageRequest) UnmarshalBinary(b []byte) error {
	var res SignMessageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
