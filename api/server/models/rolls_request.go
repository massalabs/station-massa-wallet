// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RollsRequest rolls request
//
// swagger:model RollsRequest
type RollsRequest struct {

	// amount
	// Required: true
	Amount Amount `json:"amount"`

	// fee
	// Required: true
	Fee Amount `json:"fee"`

	// side
	// Required: true
	// Enum: [buy sell]
	Side *string `json:"side"`
}

// Validate validates this rolls request
func (m *RollsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSide(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RollsRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", Amount(m.Amount)); err != nil {
		return err
	}

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *RollsRequest) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", Amount(m.Fee)); err != nil {
		return err
	}

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fee")
		}
		return err
	}

	return nil
}

var rollsRequestTypeSidePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["buy","sell"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rollsRequestTypeSidePropEnum = append(rollsRequestTypeSidePropEnum, v)
	}
}

const (

	// RollsRequestSideBuy captures enum value "buy"
	RollsRequestSideBuy string = "buy"

	// RollsRequestSideSell captures enum value "sell"
	RollsRequestSideSell string = "sell"
)

// prop value enum
func (m *RollsRequest) validateSideEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rollsRequestTypeSidePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RollsRequest) validateSide(formats strfmt.Registry) error {

	if err := validate.Required("side", "body", m.Side); err != nil {
		return err
	}

	// value enum
	if err := m.validateSideEnum("side", "body", *m.Side); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rolls request based on the context it is used
func (m *RollsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RollsRequest) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Amount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *RollsRequest) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Fee.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fee")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RollsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RollsRequest) UnmarshalBinary(b []byte) error {
	var res RollsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
