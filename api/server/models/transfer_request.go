// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferRequest transfer request
//
// swagger:model TransferRequest
type TransferRequest struct {

	// amount
	// Required: true
	Amount Amount `json:"amount"`

	// fee
	// Required: true
	Fee Amount `json:"fee"`

	// recipient address
	// Required: true
	RecipientAddress *string `json:"recipientAddress"`
}

// Validate validates this transfer request
func (m *TransferRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", Amount(m.Amount)); err != nil {
		return err
	}

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *TransferRequest) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", Amount(m.Fee)); err != nil {
		return err
	}

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fee")
		}
		return err
	}

	return nil
}

func (m *TransferRequest) validateRecipientAddress(formats strfmt.Registry) error {

	if err := validate.Required("recipientAddress", "body", m.RecipientAddress); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transfer request based on the context it is used
func (m *TransferRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferRequest) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Amount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *TransferRequest) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Fee.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fee")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransferRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferRequest) UnmarshalBinary(b []byte) error {
	var res TransferRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
