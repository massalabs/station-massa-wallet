// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAccountRequest Account object (V0).
//
// swagger:model UpdateAccountRequest
type UpdateAccountRequest struct {

	// address
	Address Address `json:"address,omitempty"`

	// balance
	Balance Amount `json:"balance,omitempty"`

	// candidate balance
	CandidateBalance Amount `json:"candidateBalance,omitempty"`

	// key pair
	KeyPair KeyPair `json:"keyPair,omitempty"`

	// nickname
	// Required: true
	Nickname Nickname `json:"nickname"`
}

// Validate validates this update account request
func (m *UpdateAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCandidateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyPair(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAccountRequest) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := m.Address.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("address")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("address")
		}

		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if err := m.Balance.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("balance")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("balance")
		}

		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateCandidateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.CandidateBalance) { // not required
		return nil
	}

	if err := m.CandidateBalance.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("candidateBalance")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("candidateBalance")
		}

		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateKeyPair(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyPair) { // not required
		return nil
	}

	if err := m.KeyPair.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("keyPair")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("keyPair")
		}

		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("nickname", "body", m.Nickname); err != nil {
		return err
	}

	if err := m.Nickname.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("nickname")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("nickname")
		}

		return err
	}

	return nil
}

// ContextValidate validate this update account request based on the context it is used
func (m *UpdateAccountRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCandidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyPair(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNickname(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAccountRequest) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := m.Address.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("address")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("address")
		}

		return err
	}

	return nil
}

func (m *UpdateAccountRequest) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if err := m.Balance.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("balance")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("balance")
		}

		return err
	}

	return nil
}

func (m *UpdateAccountRequest) contextValidateCandidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CandidateBalance) { // not required
		return nil
	}

	if err := m.CandidateBalance.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("candidateBalance")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("candidateBalance")
		}

		return err
	}

	return nil
}

func (m *UpdateAccountRequest) contextValidateKeyPair(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.KeyPair) { // not required
		return nil
	}

	if err := m.KeyPair.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("keyPair")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("keyPair")
		}

		return err
	}

	return nil
}

func (m *UpdateAccountRequest) contextValidateNickname(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Nickname.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("nickname")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("nickname")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAccountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAccountRequest) UnmarshalBinary(b []byte) error {
	var res UpdateAccountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
