// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "MassaStation plugin - Wallet",
    "title": "massa-wallet",
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "paths": {
    "/": {
      "get": {
        "operationId": "defaultPage",
        "responses": {
          "301": {
            "description": "Move to the default endpoint"
          }
        }
      }
    },
    "/api/accounts": {
      "get": {
        "description": "Get all the accounts.",
        "produces": [
          "application/json"
        ],
        "operationId": "AccountList",
        "responses": {
          "200": {
            "description": "Accounts retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Import a new account",
        "produces": [
          "application/json"
        ],
        "operationId": "ImportAccount",
        "responses": {
          "200": {
            "description": "Account imported.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}": {
      "get": {
        "description": "Get the account associated with the provided nickname in the path, with the option to return the ciphered private key.",
        "produces": [
          "application/json"
        ],
        "operationId": "GetAccount",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          },
          {
            "$ref": "#/parameters/ciphered"
          }
        ],
        "responses": {
          "200": {
            "description": "Account retrieved.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication. Only possible if ciphered is false.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update the account associated with the provided nickname in the path.",
        "produces": [
          "application/json"
        ],
        "operationId": "UpdateAccount",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account edited successfully.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Generate a new account with new random keys",
        "produces": [
          "application/json"
        ],
        "operationId": "CreateAccount",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          }
        ],
        "responses": {
          "200": {
            "description": "New account created.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the account associated with the provided nickname in the path, the user will be prompt to confirm the deletion.",
        "produces": [
          "application/json"
        ],
        "operationId": "DeleteAccount",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          }
        ],
        "responses": {
          "204": {
            "description": "Account deleted successfully.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/assets": {
      "get": {
        "description": "Get all assets with their balance.",
        "produces": [
          "application/json"
        ],
        "operationId": "GetAllAssets",
        "parameters": [
          {
            "type": "string",
            "description": "The nickname of the wallet to retrieve assets for.",
            "name": "nickname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All assets retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfoWithBalance"
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Add token information and persist it for future use.",
        "produces": [
          "application/json"
        ],
        "operationId": "AddAsset",
        "parameters": [
          {
            "type": "string",
            "description": "The nickname of the account to add the asset to.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^AS[0-9a-zA-Z]+$",
            "type": "string",
            "description": "The asset address (token address) to add to the account. It must start with \"AS\" and contain only alphanumeric characters.",
            "name": "assetAddress",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Asset information retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found - The asset with the provided address was not found in the network.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - the provided addresses is not valid.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete token information from an account.",
        "produces": [
          "application/json"
        ],
        "operationId": "DeleteAsset",
        "parameters": [
          {
            "type": "string",
            "description": "The nickname of the account from which to delete the asset.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^AS[0-9a-zA-Z]+$",
            "type": "string",
            "description": "The asset address (token address) to delete from the account. It must start with \"AS\" and contain only alphanumeric characters.",
            "name": "assetAddress",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Asset information deleted successfully."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found - At least one of the provided addresses is not valid.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/backup": {
      "post": {
        "description": "Export the account associated with the provided nickname in the path. Will ask the user to enter its account password.",
        "produces": [
          "application/json"
        ],
        "operationId": "BackupAccount",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          }
        ],
        "responses": {
          "204": {
            "description": "Account backup"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/exportFile": {
      "get": {
        "description": "Download the account file corresponding to the nickname given in path.",
        "produces": [
          "application/octet-stream"
        ],
        "operationId": "ExportAccountFile",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          }
        ],
        "responses": {
          "200": {
            "description": "Download the account file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/rolls": {
      "post": {
        "description": "Buy or sell rolls.",
        "operationId": "TradeRolls",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RollsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation id",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/sign": {
      "post": {
        "description": "Sign an operation or a message using the account associated with the provided nickname in the path. If no correlationId is provided, the user will be prompted to enter their account password.",
        "produces": [
          "application/json"
        ],
        "operationId": "Sign",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the signature, public key, and correlationId (if provided).",
            "schema": {
              "$ref": "#/definitions/SignResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication. Only if no correlationId is provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/signMessage": {
      "post": {
        "description": "Sign a message using the account associated with the provided nickname in the path.",
        "produces": [
          "application/json"
        ],
        "operationId": "SignMessage",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the signature, public key.",
            "schema": {
              "$ref": "#/definitions/SignResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/transfer": {
      "post": {
        "description": "Transfer coins from the account associated with the provided nickname in the path. Will ask the user to enter its account password.",
        "produces": [
          "application/json"
        ],
        "operationId": "TransferCoin",
        "parameters": [
          {
            "$ref": "#/parameters/nickname"
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation id",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/web-app/{resource}": {
      "get": {
        "description": "Route for the ReactJS front-end web application (in /web-frontend)",
        "produces": [
          "application/json",
          "text/javascript",
          "text/html",
          "text/css",
          "text/webp",
          "image/png"
        ],
        "operationId": "webApp",
        "parameters": [
          {
            "type": "string",
            "default": "index.html",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "description": "Account object (V0).",
      "type": "object",
      "required": [
        "nickname",
        "address",
        "keyPair",
        "balance",
        "candidateBalance"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "balance": {
          "$ref": "#/definitions/Amount"
        },
        "candidateBalance": {
          "$ref": "#/definitions/Amount"
        },
        "keyPair": {
          "$ref": "#/definitions/KeyPair"
        },
        "nickname": {
          "$ref": "#/definitions/Nickname"
        },
        "status": {
          "type": "string",
          "enum": [
            "ok",
            "corrupted"
          ]
        }
      }
    },
    "Address": {
      "description": "Account's address.",
      "type": "string",
      "x-nullable": false
    },
    "Amount": {
      "description": "Mas amount in nanoMassa.",
      "type": "string",
      "x-nullable": false
    },
    "AssetInfo": {
      "description": "Token informations",
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "decimals": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "x-nullable": false
    },
    "AssetInfoWithBalance": {
      "allOf": [
        {
          "$ref": "#/definitions/AssetInfo"
        },
        {
          "type": "object",
          "properties": {
            "balance": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CorrelationId": {
      "description": "Correlation id of the operation batch",
      "type": "string",
      "format": "byte"
    },
    "Error": {
      "description": "Error object.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "error code.",
          "type": "string",
          "x-nullable": false
        },
        "message": {
          "description": "error message.",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "KeyPair": {
      "description": "Account's key pair.",
      "type": "object",
      "required": [
        "privateKey",
        "publicKey",
        "salt",
        "nonce"
      ],
      "properties": {
        "nonce": {
          "description": "Nonce used by the AES-GCM algorithm used to protect the key pair's private key.",
          "type": "string",
          "format": "base58check",
          "x-nullable": false
        },
        "privateKey": {
          "description": "Key pair's private key.",
          "type": "string",
          "format": "base58check",
          "x-nullable": false
        },
        "publicKey": {
          "description": "Key pair's public key.",
          "type": "string",
          "format": "base58check",
          "x-nullable": false
        },
        "salt": {
          "description": "Salt used by the PBKDF that generates the secret key used to protect the key pair's private key.",
          "type": "string",
          "format": "base58check",
          "x-nullable": false
        }
      },
      "x-nullable": false
    },
    "Nickname": {
      "description": "Account's short name.",
      "type": "string",
      "x-nullable": false
    },
    "OperationResponse": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RollsRequest": {
      "type": "object",
      "required": [
        "fee",
        "amount",
        "side"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "fee": {
          "$ref": "#/definitions/Amount"
        },
        "side": {
          "type": "string",
          "enum": [
            "buy",
            "sell"
          ]
        }
      }
    },
    "SignMessageRequest": {
      "type": "object",
      "properties": {
        "DisplayData": {
          "description": "A boolean indicating whether to display data.",
          "type": "boolean",
          "default": true
        },
        "description": {
          "description": "Description text of what is being signed (optional)",
          "type": "string",
          "maxLength": 280
        },
        "message": {
          "description": "The message to sign.",
          "type": "string"
        }
      }
    },
    "SignRequest": {
      "type": "object",
      "required": [
        "operation"
      ],
      "properties": {
        "batch": {
          "description": "A boolean property that indicates whether the sign operation is part of a batch of operations. Set to true if this operation is part of a batch, otherwise set to false.",
          "type": "boolean"
        },
        "correlationId": {
          "$ref": "#/definitions/CorrelationId"
        },
        "description": {
          "description": "Description text of what is being signed (optional)",
          "type": "string",
          "maxLength": 280
        },
        "operation": {
          "description": "Serialized attributes of the operation to be signed with the key pair corresponding to the given nickname.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "SignResponse": {
      "description": "Signature of a sent operation.",
      "type": "object",
      "properties": {
        "correlationId": {
          "$ref": "#/definitions/CorrelationId"
        },
        "publicKey": {
          "description": "Public part of the key pair used to sign the operation.",
          "type": "string",
          "x-nullable": false,
          "readOnly": true
        },
        "signature": {
          "description": "Hash of the operation attributes encrypted with the private part of the key pair.",
          "type": "string",
          "format": "byte",
          "x-nullable": false,
          "readOnly": true
        }
      }
    },
    "TransferRequest": {
      "type": "object",
      "required": [
        "fee",
        "amount",
        "recipientAddress"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "fee": {
          "$ref": "#/definitions/Amount"
        },
        "recipientAddress": {
          "type": "string"
        }
      }
    },
    "UpdateAccountRequest": {
      "description": "Account object (V0).",
      "type": "object",
      "required": [
        "nickname"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "balance": {
          "$ref": "#/definitions/Amount"
        },
        "candidateBalance": {
          "$ref": "#/definitions/Amount"
        },
        "keyPair": {
          "$ref": "#/definitions/KeyPair"
        },
        "nickname": {
          "$ref": "#/definitions/Nickname"
        }
      }
    }
  },
  "parameters": {
    "ciphered": {
      "type": "boolean",
      "default": true,
      "x-nullable": true,
      "description": "whether to return the data ciphered or not",
      "name": "ciphered",
      "in": "query"
    },
    "nickname": {
      "type": "string",
      "x-nullable": false,
      "description": "Account's short name.",
      "name": "nickname",
      "in": "path",
      "required": true
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "MassaStation plugin - Wallet",
    "title": "massa-wallet",
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "paths": {
    "/": {
      "get": {
        "operationId": "defaultPage",
        "responses": {
          "301": {
            "description": "Move to the default endpoint"
          }
        }
      }
    },
    "/api/accounts": {
      "get": {
        "description": "Get all the accounts.",
        "produces": [
          "application/json"
        ],
        "operationId": "AccountList",
        "responses": {
          "200": {
            "description": "Accounts retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Import a new account",
        "produces": [
          "application/json"
        ],
        "operationId": "ImportAccount",
        "responses": {
          "200": {
            "description": "Account imported.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}": {
      "get": {
        "description": "Get the account associated with the provided nickname in the path, with the option to return the ciphered private key.",
        "produces": [
          "application/json"
        ],
        "operationId": "GetAccount",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-nullable": true,
            "description": "whether to return the data ciphered or not",
            "name": "ciphered",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Account retrieved.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication. Only possible if ciphered is false.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update the account associated with the provided nickname in the path.",
        "produces": [
          "application/json"
        ],
        "operationId": "UpdateAccount",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account edited successfully.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Generate a new account with new random keys",
        "produces": [
          "application/json"
        ],
        "operationId": "CreateAccount",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "New account created.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the account associated with the provided nickname in the path, the user will be prompt to confirm the deletion.",
        "produces": [
          "application/json"
        ],
        "operationId": "DeleteAccount",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Account deleted successfully.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/assets": {
      "get": {
        "description": "Get all assets with their balance.",
        "produces": [
          "application/json"
        ],
        "operationId": "GetAllAssets",
        "parameters": [
          {
            "type": "string",
            "description": "The nickname of the wallet to retrieve assets for.",
            "name": "nickname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All assets retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfoWithBalance"
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Add token information and persist it for future use.",
        "produces": [
          "application/json"
        ],
        "operationId": "AddAsset",
        "parameters": [
          {
            "type": "string",
            "description": "The nickname of the account to add the asset to.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^AS[0-9a-zA-Z]+$",
            "type": "string",
            "description": "The asset address (token address) to add to the account. It must start with \"AS\" and contain only alphanumeric characters.",
            "name": "assetAddress",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Asset information retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found - The asset with the provided address was not found in the network.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - the provided addresses is not valid.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete token information from an account.",
        "produces": [
          "application/json"
        ],
        "operationId": "DeleteAsset",
        "parameters": [
          {
            "type": "string",
            "description": "The nickname of the account from which to delete the asset.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^AS[0-9a-zA-Z]+$",
            "type": "string",
            "description": "The asset address (token address) to delete from the account. It must start with \"AS\" and contain only alphanumeric characters.",
            "name": "assetAddress",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Asset information deleted successfully."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found - At least one of the provided addresses is not valid.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/backup": {
      "post": {
        "description": "Export the account associated with the provided nickname in the path. Will ask the user to enter its account password.",
        "produces": [
          "application/json"
        ],
        "operationId": "BackupAccount",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Account backup"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/exportFile": {
      "get": {
        "description": "Download the account file corresponding to the nickname given in path.",
        "produces": [
          "application/octet-stream"
        ],
        "operationId": "ExportAccountFile",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Download the account file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/rolls": {
      "post": {
        "description": "Buy or sell rolls.",
        "operationId": "TradeRolls",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RollsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation id",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/sign": {
      "post": {
        "description": "Sign an operation or a message using the account associated with the provided nickname in the path. If no correlationId is provided, the user will be prompted to enter their account password.",
        "produces": [
          "application/json"
        ],
        "operationId": "Sign",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the signature, public key, and correlationId (if provided).",
            "schema": {
              "$ref": "#/definitions/SignResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication. Only if no correlationId is provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/signMessage": {
      "post": {
        "description": "Sign a message using the account associated with the provided nickname in the path.",
        "produces": [
          "application/json"
        ],
        "operationId": "SignMessage",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the signature, public key.",
            "schema": {
              "$ref": "#/definitions/SignResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/accounts/{nickname}/transfer": {
      "post": {
        "description": "Transfer coins from the account associated with the provided nickname in the path. Will ask the user to enter its account password.",
        "produces": [
          "application/json"
        ],
        "operationId": "TransferCoin",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Account's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation id",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/web-app/{resource}": {
      "get": {
        "description": "Route for the ReactJS front-end web application (in /web-frontend)",
        "produces": [
          "application/json",
          "image/png",
          "text/css",
          "text/html",
          "text/javascript",
          "text/webp"
        ],
        "operationId": "webApp",
        "parameters": [
          {
            "type": "string",
            "default": "index.html",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "description": "Account object (V0).",
      "type": "object",
      "required": [
        "nickname",
        "address",
        "keyPair",
        "balance",
        "candidateBalance"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "balance": {
          "$ref": "#/definitions/Amount"
        },
        "candidateBalance": {
          "$ref": "#/definitions/Amount"
        },
        "keyPair": {
          "$ref": "#/definitions/KeyPair"
        },
        "nickname": {
          "$ref": "#/definitions/Nickname"
        },
        "status": {
          "type": "string",
          "enum": [
            "ok",
            "corrupted"
          ]
        }
      }
    },
    "Address": {
      "description": "Account's address.",
      "type": "string",
      "x-nullable": false
    },
    "Amount": {
      "description": "Mas amount in nanoMassa.",
      "type": "string",
      "x-nullable": false
    },
    "AssetInfo": {
      "description": "Token informations",
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "decimals": {
          "type": "integer",
          "minimum": 0
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "x-nullable": false
    },
    "AssetInfoWithBalance": {
      "allOf": [
        {
          "$ref": "#/definitions/AssetInfo"
        },
        {
          "type": "object",
          "properties": {
            "balance": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CorrelationId": {
      "description": "Correlation id of the operation batch",
      "type": "string",
      "format": "byte"
    },
    "Error": {
      "description": "Error object.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "error code.",
          "type": "string",
          "x-nullable": false
        },
        "message": {
          "description": "error message.",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "KeyPair": {
      "description": "Account's key pair.",
      "type": "object",
      "required": [
        "privateKey",
        "publicKey",
        "salt",
        "nonce"
      ],
      "properties": {
        "nonce": {
          "description": "Nonce used by the AES-GCM algorithm used to protect the key pair's private key.",
          "type": "string",
          "format": "base58check",
          "x-nullable": false
        },
        "privateKey": {
          "description": "Key pair's private key.",
          "type": "string",
          "format": "base58check",
          "x-nullable": false
        },
        "publicKey": {
          "description": "Key pair's public key.",
          "type": "string",
          "format": "base58check",
          "x-nullable": false
        },
        "salt": {
          "description": "Salt used by the PBKDF that generates the secret key used to protect the key pair's private key.",
          "type": "string",
          "format": "base58check",
          "x-nullable": false
        }
      },
      "x-nullable": false
    },
    "Nickname": {
      "description": "Account's short name.",
      "type": "string",
      "x-nullable": false
    },
    "OperationResponse": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RollsRequest": {
      "type": "object",
      "required": [
        "fee",
        "amount",
        "side"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "fee": {
          "$ref": "#/definitions/Amount"
        },
        "side": {
          "type": "string",
          "enum": [
            "buy",
            "sell"
          ]
        }
      }
    },
    "SignMessageRequest": {
      "type": "object",
      "properties": {
        "DisplayData": {
          "description": "A boolean indicating whether to display data.",
          "type": "boolean",
          "default": true
        },
        "description": {
          "description": "Description text of what is being signed (optional)",
          "type": "string",
          "maxLength": 280
        },
        "message": {
          "description": "The message to sign.",
          "type": "string"
        }
      }
    },
    "SignRequest": {
      "type": "object",
      "required": [
        "operation"
      ],
      "properties": {
        "batch": {
          "description": "A boolean property that indicates whether the sign operation is part of a batch of operations. Set to true if this operation is part of a batch, otherwise set to false.",
          "type": "boolean"
        },
        "correlationId": {
          "$ref": "#/definitions/CorrelationId"
        },
        "description": {
          "description": "Description text of what is being signed (optional)",
          "type": "string",
          "maxLength": 280
        },
        "operation": {
          "description": "Serialized attributes of the operation to be signed with the key pair corresponding to the given nickname.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "SignResponse": {
      "description": "Signature of a sent operation.",
      "type": "object",
      "properties": {
        "correlationId": {
          "$ref": "#/definitions/CorrelationId"
        },
        "publicKey": {
          "description": "Public part of the key pair used to sign the operation.",
          "type": "string",
          "x-nullable": false,
          "readOnly": true
        },
        "signature": {
          "description": "Hash of the operation attributes encrypted with the private part of the key pair.",
          "type": "string",
          "format": "byte",
          "x-nullable": false,
          "readOnly": true
        }
      }
    },
    "TransferRequest": {
      "type": "object",
      "required": [
        "fee",
        "amount",
        "recipientAddress"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "fee": {
          "$ref": "#/definitions/Amount"
        },
        "recipientAddress": {
          "type": "string"
        }
      }
    },
    "UpdateAccountRequest": {
      "description": "Account object (V0).",
      "type": "object",
      "required": [
        "nickname"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "balance": {
          "$ref": "#/definitions/Amount"
        },
        "candidateBalance": {
          "$ref": "#/definitions/Amount"
        },
        "keyPair": {
          "$ref": "#/definitions/KeyPair"
        },
        "nickname": {
          "$ref": "#/definitions/Nickname"
        }
      }
    }
  },
  "parameters": {
    "ciphered": {
      "type": "boolean",
      "default": true,
      "x-nullable": true,
      "description": "whether to return the data ciphered or not",
      "name": "ciphered",
      "in": "query"
    },
    "nickname": {
      "type": "string",
      "x-nullable": false,
      "description": "Account's short name.",
      "name": "nickname",
      "in": "path",
      "required": true
    }
  }
}`))
}
