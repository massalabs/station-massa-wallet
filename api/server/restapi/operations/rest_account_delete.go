// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RestAccountDeleteHandlerFunc turns a function with the right signature into a rest account delete handler
type RestAccountDeleteHandlerFunc func(RestAccountDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RestAccountDeleteHandlerFunc) Handle(params RestAccountDeleteParams) middleware.Responder {
	return fn(params)
}

// RestAccountDeleteHandler interface for that can handle valid rest account delete params
type RestAccountDeleteHandler interface {
	Handle(RestAccountDeleteParams) middleware.Responder
}

// NewRestAccountDelete creates a new http.Handler for the rest account delete operation
func NewRestAccountDelete(ctx *middleware.Context, handler RestAccountDeleteHandler) *RestAccountDelete {
	return &RestAccountDelete{Context: ctx, Handler: handler}
}

/*
	RestAccountDelete swagger:route DELETE /api/accounts/{nickname} restAccountDelete

Delete the account by nickname given in path.
*/
type RestAccountDelete struct {
	Context *middleware.Context
	Handler RestAccountDeleteHandler
}

func (o *RestAccountDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRestAccountDeleteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
