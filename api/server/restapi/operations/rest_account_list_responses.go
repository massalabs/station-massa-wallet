// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra-plugin-wallet/api/server/models"
)

// RestAccountListOKCode is the HTTP code returned for type RestAccountListOK
const RestAccountListOKCode int = 200

/*
RestAccountListOK Accounts retrieved

swagger:response restAccountListOK
*/
type RestAccountListOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Account `json:"body,omitempty"`
}

// NewRestAccountListOK creates RestAccountListOK with default headers values
func NewRestAccountListOK() *RestAccountListOK {

	return &RestAccountListOK{}
}

// WithPayload adds the payload to the rest account list o k response
func (o *RestAccountListOK) WithPayload(payload []*models.Account) *RestAccountListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rest account list o k response
func (o *RestAccountListOK) SetPayload(payload []*models.Account) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RestAccountListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Account, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// RestAccountListBadRequestCode is the HTTP code returned for type RestAccountListBadRequest
const RestAccountListBadRequestCode int = 400

/*
RestAccountListBadRequest Bad request.

swagger:response restAccountListBadRequest
*/
type RestAccountListBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRestAccountListBadRequest creates RestAccountListBadRequest with default headers values
func NewRestAccountListBadRequest() *RestAccountListBadRequest {

	return &RestAccountListBadRequest{}
}

// WithPayload adds the payload to the rest account list bad request response
func (o *RestAccountListBadRequest) WithPayload(payload *models.Error) *RestAccountListBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rest account list bad request response
func (o *RestAccountListBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RestAccountListBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RestAccountListInternalServerErrorCode is the HTTP code returned for type RestAccountListInternalServerError
const RestAccountListInternalServerErrorCode int = 500

/*
RestAccountListInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response restAccountListInternalServerError
*/
type RestAccountListInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRestAccountListInternalServerError creates RestAccountListInternalServerError with default headers values
func NewRestAccountListInternalServerError() *RestAccountListInternalServerError {

	return &RestAccountListInternalServerError{}
}

// WithPayload adds the payload to the rest account list internal server error response
func (o *RestAccountListInternalServerError) WithPayload(payload *models.Error) *RestAccountListInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rest account list internal server error response
func (o *RestAccountListInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RestAccountListInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
