// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/station-massa-wallet/api/server/models"
)

// GetAccountOKCode is the HTTP code returned for type GetAccountOK
const GetAccountOKCode int = 200

/*
GetAccountOK Account retrieved.

swagger:response getAccountOK
*/
type GetAccountOK struct {

	/*
	  In: Body
	*/
	Payload *models.Account `json:"body,omitempty"`
}

// NewGetAccountOK creates GetAccountOK with default headers values
func NewGetAccountOK() *GetAccountOK {

	return &GetAccountOK{}
}

// WithPayload adds the payload to the get account o k response
func (o *GetAccountOK) WithPayload(payload *models.Account) *GetAccountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get account o k response
func (o *GetAccountOK) SetPayload(payload *models.Account) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAccountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAccountBadRequestCode is the HTTP code returned for type GetAccountBadRequest
const GetAccountBadRequestCode int = 400

/*
GetAccountBadRequest Bad request.

swagger:response getAccountBadRequest
*/
type GetAccountBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAccountBadRequest creates GetAccountBadRequest with default headers values
func NewGetAccountBadRequest() *GetAccountBadRequest {

	return &GetAccountBadRequest{}
}

// WithPayload adds the payload to the get account bad request response
func (o *GetAccountBadRequest) WithPayload(payload *models.Error) *GetAccountBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get account bad request response
func (o *GetAccountBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAccountBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAccountUnauthorizedCode is the HTTP code returned for type GetAccountUnauthorized
const GetAccountUnauthorizedCode int = 401

/*
GetAccountUnauthorized Unauthorized - The request requires user authentication. Only possible if ciphered is false.

swagger:response getAccountUnauthorized
*/
type GetAccountUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAccountUnauthorized creates GetAccountUnauthorized with default headers values
func NewGetAccountUnauthorized() *GetAccountUnauthorized {

	return &GetAccountUnauthorized{}
}

// WithPayload adds the payload to the get account unauthorized response
func (o *GetAccountUnauthorized) WithPayload(payload *models.Error) *GetAccountUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get account unauthorized response
func (o *GetAccountUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAccountUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAccountNotFoundCode is the HTTP code returned for type GetAccountNotFound
const GetAccountNotFoundCode int = 404

/*
GetAccountNotFound Not found.

swagger:response getAccountNotFound
*/
type GetAccountNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAccountNotFound creates GetAccountNotFound with default headers values
func NewGetAccountNotFound() *GetAccountNotFound {

	return &GetAccountNotFound{}
}

// WithPayload adds the payload to the get account not found response
func (o *GetAccountNotFound) WithPayload(payload *models.Error) *GetAccountNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get account not found response
func (o *GetAccountNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAccountNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAccountInternalServerErrorCode is the HTTP code returned for type GetAccountInternalServerError
const GetAccountInternalServerErrorCode int = 500

/*
GetAccountInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response getAccountInternalServerError
*/
type GetAccountInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAccountInternalServerError creates GetAccountInternalServerError with default headers values
func NewGetAccountInternalServerError() *GetAccountInternalServerError {

	return &GetAccountInternalServerError{}
}

// WithPayload adds the payload to the get account internal server error response
func (o *GetAccountInternalServerError) WithPayload(payload *models.Error) *GetAccountInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get account internal server error response
func (o *GetAccountInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAccountInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
