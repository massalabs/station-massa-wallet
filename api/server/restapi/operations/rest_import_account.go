// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RestImportAccountHandlerFunc turns a function with the right signature into a rest import account handler
type RestImportAccountHandlerFunc func(RestImportAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RestImportAccountHandlerFunc) Handle(params RestImportAccountParams) middleware.Responder {
	return fn(params)
}

// RestImportAccountHandler interface for that can handle valid rest import account params
type RestImportAccountHandler interface {
	Handle(RestImportAccountParams) middleware.Responder
}

// NewRestImportAccount creates a new http.Handler for the rest import account operation
func NewRestImportAccount(ctx *middleware.Context, handler RestImportAccountHandler) *RestImportAccount {
	return &RestImportAccount{Context: ctx, Handler: handler}
}

/*
	RestImportAccount swagger:route PUT /api/accounts restImportAccount

Import a new account
*/
type RestImportAccount struct {
	Context *middleware.Context
	Handler RestImportAccountHandler
}

func (o *RestImportAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRestImportAccountParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
