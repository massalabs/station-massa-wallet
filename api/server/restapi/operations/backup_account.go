// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BackupAccountHandlerFunc turns a function with the right signature into a backup account handler
type BackupAccountHandlerFunc func(BackupAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BackupAccountHandlerFunc) Handle(params BackupAccountParams) middleware.Responder {
	return fn(params)
}

// BackupAccountHandler interface for that can handle valid backup account params
type BackupAccountHandler interface {
	Handle(BackupAccountParams) middleware.Responder
}

// NewBackupAccount creates a new http.Handler for the backup account operation
func NewBackupAccount(ctx *middleware.Context, handler BackupAccountHandler) *BackupAccount {
	return &BackupAccount{Context: ctx, Handler: handler}
}

/*
	BackupAccount swagger:route POST /api/accounts/{nickname}/backup backupAccount

Export the account associated with the provided nickname in the path. Will ask the user to enter its account password.
*/
type BackupAccount struct {
	Context *middleware.Context
	Handler BackupAccountHandler
}

func (o *BackupAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBackupAccountParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
