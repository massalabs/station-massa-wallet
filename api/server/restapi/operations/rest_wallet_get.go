// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RestWalletGetHandlerFunc turns a function with the right signature into a rest wallet get handler
type RestWalletGetHandlerFunc func(RestWalletGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RestWalletGetHandlerFunc) Handle(params RestWalletGetParams) middleware.Responder {
	return fn(params)
}

// RestWalletGetHandler interface for that can handle valid rest wallet get params
type RestWalletGetHandler interface {
	Handle(RestWalletGetParams) middleware.Responder
}

// NewRestWalletGet creates a new http.Handler for the rest wallet get operation
func NewRestWalletGet(ctx *middleware.Context, handler RestWalletGetHandler) *RestWalletGet {
	return &RestWalletGet{Context: ctx, Handler: handler}
}

/*
	RestWalletGet swagger:route GET /rest/wallet/{nickname} restWalletGet

RestWalletGet rest wallet get API
*/
type RestWalletGet struct {
	Context *middleware.Context
	Handler RestWalletGetHandler
}

func (o *RestWalletGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRestWalletGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
