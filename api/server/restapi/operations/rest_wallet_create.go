// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestWalletCreateHandlerFunc turns a function with the right signature into a rest wallet create handler
type RestWalletCreateHandlerFunc func(RestWalletCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RestWalletCreateHandlerFunc) Handle(params RestWalletCreateParams) middleware.Responder {
	return fn(params)
}

// RestWalletCreateHandler interface for that can handle valid rest wallet create params
type RestWalletCreateHandler interface {
	Handle(RestWalletCreateParams) middleware.Responder
}

// NewRestWalletCreate creates a new http.Handler for the rest wallet create operation
func NewRestWalletCreate(ctx *middleware.Context, handler RestWalletCreateHandler) *RestWalletCreate {
	return &RestWalletCreate{Context: ctx, Handler: handler}
}

/*
	RestWalletCreate swagger:route POST /rest/wallet restWalletCreate

RestWalletCreate rest wallet create API
*/
type RestWalletCreate struct {
	Context *middleware.Context
	Handler RestWalletCreateHandler
}

func (o *RestWalletCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRestWalletCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RestWalletCreateBody rest wallet create body
//
// swagger:model RestWalletCreateBody
type RestWalletCreateBody struct {

	// Wallet's short name.
	// Required: true
	Nickname *string `json:"nickname"`

	// Private key password.
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this rest wallet create body
func (o *RestWalletCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RestWalletCreateBody) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"nickname", "body", o.Nickname); err != nil {
		return err
	}

	return nil
}

func (o *RestWalletCreateBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rest wallet create body based on context it is used
func (o *RestWalletCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RestWalletCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RestWalletCreateBody) UnmarshalBinary(b []byte) error {
	var res RestWalletCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
