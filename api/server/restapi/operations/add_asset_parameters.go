// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewAddAssetParams creates a new AddAssetParams object
//
// There are no default values defined in the spec.
func NewAddAssetParams() AddAssetParams {

	return AddAssetParams{}
}

// AddAssetParams contains all the bound params for the add asset operation
// typically these are obtained from a http.Request
//
// swagger:parameters AddAsset
type AddAssetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The asset address (MRC-20 token address) to add to the wallet. It must start with "AS" and contain only alphanumeric characters.
	  Required: true
	  Pattern: ^AS[0-9a-zA-Z]+$
	  In: query
	*/
	AssetAddress string
	/*The nickname of the wallet to add the asset to.
	  Required: true
	  In: query
	*/
	WalletNickname string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAddAssetParams() beforehand.
func (o *AddAssetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAssetAddress, qhkAssetAddress, _ := qs.GetOK("assetAddress")
	if err := o.bindAssetAddress(qAssetAddress, qhkAssetAddress, route.Formats); err != nil {
		res = append(res, err)
	}

	qWalletNickname, qhkWalletNickname, _ := qs.GetOK("walletNickname")
	if err := o.bindWalletNickname(qWalletNickname, qhkWalletNickname, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAssetAddress binds and validates parameter AssetAddress from query.
func (o *AddAssetParams) bindAssetAddress(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("assetAddress", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("assetAddress", "query", raw); err != nil {
		return err
	}
	o.AssetAddress = raw

	if err := o.validateAssetAddress(formats); err != nil {
		return err
	}

	return nil
}

// validateAssetAddress carries on validations for parameter AssetAddress
func (o *AddAssetParams) validateAssetAddress(formats strfmt.Registry) error {

	if err := validate.Pattern("assetAddress", "query", o.AssetAddress, `^AS[0-9a-zA-Z]+$`); err != nil {
		return err
	}

	return nil
}

// bindWalletNickname binds and validates parameter WalletNickname from query.
func (o *AddAssetParams) bindWalletNickname(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("walletNickname", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("walletNickname", "query", raw); err != nil {
		return err
	}
	o.WalletNickname = raw

	return nil
}
