// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddSignRuleHandlerFunc turns a function with the right signature into a add sign rule handler
type AddSignRuleHandlerFunc func(AddSignRuleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddSignRuleHandlerFunc) Handle(params AddSignRuleParams) middleware.Responder {
	return fn(params)
}

// AddSignRuleHandler interface for that can handle valid add sign rule params
type AddSignRuleHandler interface {
	Handle(AddSignRuleParams) middleware.Responder
}

// NewAddSignRule creates a new http.Handler for the add sign rule operation
func NewAddSignRule(ctx *middleware.Context, handler AddSignRuleHandler) *AddSignRule {
	return &AddSignRule{Context: ctx, Handler: handler}
}

/*
	AddSignRule swagger:route POST /api/accounts/{nickname}/signrules addSignRule

Create a new sign rule for the account associated with the provided nickname.
*/
type AddSignRule struct {
	Context *middleware.Context
	Handler AddSignRuleHandler
}

func (o *AddSignRule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddSignRuleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
