// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/massalabs/station-massa-wallet/api/server/models"
)

// SignMessageOKCode is the HTTP code returned for type SignMessageOK
const SignMessageOKCode int = 200

/*
SignMessageOK Returns the signature, public key.

swagger:response signMessageOK
*/
type SignMessageOK struct {

	/*
	  In: Body
	*/
	Payload *models.SignResponse `json:"body,omitempty"`
}

// NewSignMessageOK creates SignMessageOK with default headers values
func NewSignMessageOK() *SignMessageOK {

	return &SignMessageOK{}
}

// WithPayload adds the payload to the sign message o k response
func (o *SignMessageOK) WithPayload(payload *models.SignResponse) *SignMessageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign message o k response
func (o *SignMessageOK) SetPayload(payload *models.SignResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignMessageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignMessageBadRequestCode is the HTTP code returned for type SignMessageBadRequest
const SignMessageBadRequestCode int = 400

/*
SignMessageBadRequest Bad request.

swagger:response signMessageBadRequest
*/
type SignMessageBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignMessageBadRequest creates SignMessageBadRequest with default headers values
func NewSignMessageBadRequest() *SignMessageBadRequest {

	return &SignMessageBadRequest{}
}

// WithPayload adds the payload to the sign message bad request response
func (o *SignMessageBadRequest) WithPayload(payload *models.Error) *SignMessageBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign message bad request response
func (o *SignMessageBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignMessageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignMessageUnauthorizedCode is the HTTP code returned for type SignMessageUnauthorized
const SignMessageUnauthorizedCode int = 401

/*
SignMessageUnauthorized Unauthorized - The request requires user authentication.

swagger:response signMessageUnauthorized
*/
type SignMessageUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignMessageUnauthorized creates SignMessageUnauthorized with default headers values
func NewSignMessageUnauthorized() *SignMessageUnauthorized {

	return &SignMessageUnauthorized{}
}

// WithPayload adds the payload to the sign message unauthorized response
func (o *SignMessageUnauthorized) WithPayload(payload *models.Error) *SignMessageUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign message unauthorized response
func (o *SignMessageUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignMessageUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignMessageNotFoundCode is the HTTP code returned for type SignMessageNotFound
const SignMessageNotFoundCode int = 404

/*
SignMessageNotFound Account Not found.

swagger:response signMessageNotFound
*/
type SignMessageNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignMessageNotFound creates SignMessageNotFound with default headers values
func NewSignMessageNotFound() *SignMessageNotFound {

	return &SignMessageNotFound{}
}

// WithPayload adds the payload to the sign message not found response
func (o *SignMessageNotFound) WithPayload(payload *models.Error) *SignMessageNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign message not found response
func (o *SignMessageNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignMessageNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignMessageUnprocessableEntityCode is the HTTP code returned for type SignMessageUnprocessableEntity
const SignMessageUnprocessableEntityCode int = 422

/*
SignMessageUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response signMessageUnprocessableEntity
*/
type SignMessageUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignMessageUnprocessableEntity creates SignMessageUnprocessableEntity with default headers values
func NewSignMessageUnprocessableEntity() *SignMessageUnprocessableEntity {

	return &SignMessageUnprocessableEntity{}
}

// WithPayload adds the payload to the sign message unprocessable entity response
func (o *SignMessageUnprocessableEntity) WithPayload(payload *models.Error) *SignMessageUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign message unprocessable entity response
func (o *SignMessageUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignMessageUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignMessageInternalServerErrorCode is the HTTP code returned for type SignMessageInternalServerError
const SignMessageInternalServerErrorCode int = 500

/*
SignMessageInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response signMessageInternalServerError
*/
type SignMessageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignMessageInternalServerError creates SignMessageInternalServerError with default headers values
func NewSignMessageInternalServerError() *SignMessageInternalServerError {

	return &SignMessageInternalServerError{}
}

// WithPayload adds the payload to the sign message internal server error response
func (o *SignMessageInternalServerError) WithPayload(payload *models.Error) *SignMessageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign message internal server error response
func (o *SignMessageInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignMessageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
