// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/massalabs/station-massa-wallet/api/server/models"
)

// DeleteSignRuleOKCode is the HTTP code returned for type DeleteSignRuleOK
const DeleteSignRuleOKCode int = 200

/*
DeleteSignRuleOK Sign rule deleted successfully.

swagger:response deleteSignRuleOK
*/
type DeleteSignRuleOK struct {
}

// NewDeleteSignRuleOK creates DeleteSignRuleOK with default headers values
func NewDeleteSignRuleOK() *DeleteSignRuleOK {

	return &DeleteSignRuleOK{}
}

// WriteResponse to the client
func (o *DeleteSignRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteSignRuleBadRequestCode is the HTTP code returned for type DeleteSignRuleBadRequest
const DeleteSignRuleBadRequestCode int = 400

/*
DeleteSignRuleBadRequest Bad request.

swagger:response deleteSignRuleBadRequest
*/
type DeleteSignRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteSignRuleBadRequest creates DeleteSignRuleBadRequest with default headers values
func NewDeleteSignRuleBadRequest() *DeleteSignRuleBadRequest {

	return &DeleteSignRuleBadRequest{}
}

// WithPayload adds the payload to the delete sign rule bad request response
func (o *DeleteSignRuleBadRequest) WithPayload(payload *models.Error) *DeleteSignRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete sign rule bad request response
func (o *DeleteSignRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSignRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteSignRuleUnauthorizedCode is the HTTP code returned for type DeleteSignRuleUnauthorized
const DeleteSignRuleUnauthorizedCode int = 401

/*
DeleteSignRuleUnauthorized Unauthorized - The request requires user authentication.

swagger:response deleteSignRuleUnauthorized
*/
type DeleteSignRuleUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteSignRuleUnauthorized creates DeleteSignRuleUnauthorized with default headers values
func NewDeleteSignRuleUnauthorized() *DeleteSignRuleUnauthorized {

	return &DeleteSignRuleUnauthorized{}
}

// WithPayload adds the payload to the delete sign rule unauthorized response
func (o *DeleteSignRuleUnauthorized) WithPayload(payload *models.Error) *DeleteSignRuleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete sign rule unauthorized response
func (o *DeleteSignRuleUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSignRuleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteSignRuleNotFoundCode is the HTTP code returned for type DeleteSignRuleNotFound
const DeleteSignRuleNotFoundCode int = 404

/*
DeleteSignRuleNotFound Account or Rule Not found.

swagger:response deleteSignRuleNotFound
*/
type DeleteSignRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteSignRuleNotFound creates DeleteSignRuleNotFound with default headers values
func NewDeleteSignRuleNotFound() *DeleteSignRuleNotFound {

	return &DeleteSignRuleNotFound{}
}

// WithPayload adds the payload to the delete sign rule not found response
func (o *DeleteSignRuleNotFound) WithPayload(payload *models.Error) *DeleteSignRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete sign rule not found response
func (o *DeleteSignRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSignRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteSignRuleInternalServerErrorCode is the HTTP code returned for type DeleteSignRuleInternalServerError
const DeleteSignRuleInternalServerErrorCode int = 500

/*
DeleteSignRuleInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response deleteSignRuleInternalServerError
*/
type DeleteSignRuleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteSignRuleInternalServerError creates DeleteSignRuleInternalServerError with default headers values
func NewDeleteSignRuleInternalServerError() *DeleteSignRuleInternalServerError {

	return &DeleteSignRuleInternalServerError{}
}

// WithPayload adds the payload to the delete sign rule internal server error response
func (o *DeleteSignRuleInternalServerError) WithPayload(payload *models.Error) *DeleteSignRuleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete sign rule internal server error response
func (o *DeleteSignRuleInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSignRuleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
