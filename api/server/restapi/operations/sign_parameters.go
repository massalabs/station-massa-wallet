// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/massalabs/station-massa-wallet/api/server/models"
)

// NewSignParams creates a new SignParams object
// with the default values initialized.
func NewSignParams() SignParams {

	var (
		// initialize parameters with default values

		allowFeeEditionDefault = bool(false)
	)

	return SignParams{
		AllowFeeEdition: &allowFeeEditionDefault,
	}
}

// SignParams contains all the bound params for the sign operation
// typically these are obtained from a http.Request
//
// swagger:parameters Sign
type SignParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Whether to allow user to edit the fee value in the sign prompt.
	  In: query
	  Default: false
	*/
	AllowFeeEdition *bool
	/*
	  Required: true
	  In: body
	*/
	Body *models.SignRequest
	/*Account's short name.
	  Required: true
	  In: path
	*/
	Nickname string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSignParams() beforehand.
func (o *SignParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAllowFeeEdition, qhkAllowFeeEdition, _ := qs.GetOK("allow-fee-edition")
	if err := o.bindAllowFeeEdition(qAllowFeeEdition, qhkAllowFeeEdition, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.SignRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	rNickname, rhkNickname, _ := route.Params.GetOK("nickname")
	if err := o.bindNickname(rNickname, rhkNickname, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAllowFeeEdition binds and validates parameter AllowFeeEdition from query.
func (o *SignParams) bindAllowFeeEdition(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSignParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("allow-fee-edition", "query", "bool", raw)
	}
	o.AllowFeeEdition = &value

	return nil
}

// bindNickname binds and validates parameter Nickname from path.
func (o *SignParams) bindNickname(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Nickname = raw

	return nil
}
