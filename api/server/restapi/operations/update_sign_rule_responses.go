// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/massalabs/station-massa-wallet/api/server/models"
)

// UpdateSignRuleOKCode is the HTTP code returned for type UpdateSignRuleOK
const UpdateSignRuleOKCode int = 200

/*
UpdateSignRuleOK Sign rule updated successfully.

swagger:response updateSignRuleOK
*/
type UpdateSignRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.UpdateSignRuleResponse `json:"body,omitempty"`
}

// NewUpdateSignRuleOK creates UpdateSignRuleOK with default headers values
func NewUpdateSignRuleOK() *UpdateSignRuleOK {

	return &UpdateSignRuleOK{}
}

// WithPayload adds the payload to the update sign rule o k response
func (o *UpdateSignRuleOK) WithPayload(payload *models.UpdateSignRuleResponse) *UpdateSignRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update sign rule o k response
func (o *UpdateSignRuleOK) SetPayload(payload *models.UpdateSignRuleResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignRuleBadRequestCode is the HTTP code returned for type UpdateSignRuleBadRequest
const UpdateSignRuleBadRequestCode int = 400

/*
UpdateSignRuleBadRequest Bad request.

swagger:response updateSignRuleBadRequest
*/
type UpdateSignRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSignRuleBadRequest creates UpdateSignRuleBadRequest with default headers values
func NewUpdateSignRuleBadRequest() *UpdateSignRuleBadRequest {

	return &UpdateSignRuleBadRequest{}
}

// WithPayload adds the payload to the update sign rule bad request response
func (o *UpdateSignRuleBadRequest) WithPayload(payload *models.Error) *UpdateSignRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update sign rule bad request response
func (o *UpdateSignRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignRuleUnauthorizedCode is the HTTP code returned for type UpdateSignRuleUnauthorized
const UpdateSignRuleUnauthorizedCode int = 401

/*
UpdateSignRuleUnauthorized Unauthorized - The request requires user authentication.

swagger:response updateSignRuleUnauthorized
*/
type UpdateSignRuleUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSignRuleUnauthorized creates UpdateSignRuleUnauthorized with default headers values
func NewUpdateSignRuleUnauthorized() *UpdateSignRuleUnauthorized {

	return &UpdateSignRuleUnauthorized{}
}

// WithPayload adds the payload to the update sign rule unauthorized response
func (o *UpdateSignRuleUnauthorized) WithPayload(payload *models.Error) *UpdateSignRuleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update sign rule unauthorized response
func (o *UpdateSignRuleUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignRuleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignRuleNotFoundCode is the HTTP code returned for type UpdateSignRuleNotFound
const UpdateSignRuleNotFoundCode int = 404

/*
UpdateSignRuleNotFound Account or Rule Not found.

swagger:response updateSignRuleNotFound
*/
type UpdateSignRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSignRuleNotFound creates UpdateSignRuleNotFound with default headers values
func NewUpdateSignRuleNotFound() *UpdateSignRuleNotFound {

	return &UpdateSignRuleNotFound{}
}

// WithPayload adds the payload to the update sign rule not found response
func (o *UpdateSignRuleNotFound) WithPayload(payload *models.Error) *UpdateSignRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update sign rule not found response
func (o *UpdateSignRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignRuleUnprocessableEntityCode is the HTTP code returned for type UpdateSignRuleUnprocessableEntity
const UpdateSignRuleUnprocessableEntityCode int = 422

/*
UpdateSignRuleUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response updateSignRuleUnprocessableEntity
*/
type UpdateSignRuleUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSignRuleUnprocessableEntity creates UpdateSignRuleUnprocessableEntity with default headers values
func NewUpdateSignRuleUnprocessableEntity() *UpdateSignRuleUnprocessableEntity {

	return &UpdateSignRuleUnprocessableEntity{}
}

// WithPayload adds the payload to the update sign rule unprocessable entity response
func (o *UpdateSignRuleUnprocessableEntity) WithPayload(payload *models.Error) *UpdateSignRuleUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update sign rule unprocessable entity response
func (o *UpdateSignRuleUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignRuleUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignRuleInternalServerErrorCode is the HTTP code returned for type UpdateSignRuleInternalServerError
const UpdateSignRuleInternalServerErrorCode int = 500

/*
UpdateSignRuleInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response updateSignRuleInternalServerError
*/
type UpdateSignRuleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSignRuleInternalServerError creates UpdateSignRuleInternalServerError with default headers values
func NewUpdateSignRuleInternalServerError() *UpdateSignRuleInternalServerError {

	return &UpdateSignRuleInternalServerError{}
}

// WithPayload adds the payload to the update sign rule internal server error response
func (o *UpdateSignRuleInternalServerError) WithPayload(payload *models.Error) *UpdateSignRuleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update sign rule internal server error response
func (o *UpdateSignRuleInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignRuleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
