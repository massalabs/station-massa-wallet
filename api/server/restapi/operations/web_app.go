// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WebAppHandlerFunc turns a function with the right signature into a web app handler
type WebAppHandlerFunc func(WebAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WebAppHandlerFunc) Handle(params WebAppParams) middleware.Responder {
	return fn(params)
}

// WebAppHandler interface for that can handle valid web app params
type WebAppHandler interface {
	Handle(WebAppParams) middleware.Responder
}

// NewWebApp creates a new http.Handler for the web app operation
func NewWebApp(ctx *middleware.Context, handler WebAppHandler) *WebApp {
	return &WebApp{Context: ctx, Handler: handler}
}

/*
	WebApp swagger:route GET /web-app/{resource} webApp

Route for the ReactJS front-end web application (in /web-frontend)
*/
type WebApp struct {
	Context *middleware.Context
	Handler WebAppHandler
}

func (o *WebApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewWebAppParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
