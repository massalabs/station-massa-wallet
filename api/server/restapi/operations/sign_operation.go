// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SignOperationHandlerFunc turns a function with the right signature into a sign operation handler
type SignOperationHandlerFunc func(SignOperationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignOperationHandlerFunc) Handle(params SignOperationParams) middleware.Responder {
	return fn(params)
}

// SignOperationHandler interface for that can handle valid sign operation params
type SignOperationHandler interface {
	Handle(SignOperationParams) middleware.Responder
}

// NewSignOperation creates a new http.Handler for the sign operation operation
func NewSignOperation(ctx *middleware.Context, handler SignOperationHandler) *SignOperation {
	return &SignOperation{Context: ctx, Handler: handler}
}

/*
	SignOperation swagger:route POST /api/accounts/{nickname}/signOperation signOperation

Sign an operation with the account by nickname given in path.
*/
type SignOperation struct {
	Context *middleware.Context
	Handler SignOperationHandler
}

func (o *SignOperation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSignOperationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
