// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/station-massa-wallet/api/server/models"
)

// SignOKCode is the HTTP code returned for type SignOK
const SignOKCode int = 200

/*
SignOK Returns the signature, public key, and correlationId (if provided).

swagger:response signOK
*/
type SignOK struct {

	/*
	  In: Body
	*/
	Payload *models.SignResponse `json:"body,omitempty"`
}

// NewSignOK creates SignOK with default headers values
func NewSignOK() *SignOK {

	return &SignOK{}
}

// WithPayload adds the payload to the sign o k response
func (o *SignOK) WithPayload(payload *models.SignResponse) *SignOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign o k response
func (o *SignOK) SetPayload(payload *models.SignResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignBadRequestCode is the HTTP code returned for type SignBadRequest
const SignBadRequestCode int = 400

/*
SignBadRequest Bad request.

swagger:response signBadRequest
*/
type SignBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignBadRequest creates SignBadRequest with default headers values
func NewSignBadRequest() *SignBadRequest {

	return &SignBadRequest{}
}

// WithPayload adds the payload to the sign bad request response
func (o *SignBadRequest) WithPayload(payload *models.Error) *SignBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign bad request response
func (o *SignBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignUnauthorizedCode is the HTTP code returned for type SignUnauthorized
const SignUnauthorizedCode int = 401

/*
SignUnauthorized Unauthorized - The request requires user authentication. Only if no correlationId is provided.

swagger:response signUnauthorized
*/
type SignUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignUnauthorized creates SignUnauthorized with default headers values
func NewSignUnauthorized() *SignUnauthorized {

	return &SignUnauthorized{}
}

// WithPayload adds the payload to the sign unauthorized response
func (o *SignUnauthorized) WithPayload(payload *models.Error) *SignUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign unauthorized response
func (o *SignUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignNotFoundCode is the HTTP code returned for type SignNotFound
const SignNotFoundCode int = 404

/*
SignNotFound Account Not found.

swagger:response signNotFound
*/
type SignNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignNotFound creates SignNotFound with default headers values
func NewSignNotFound() *SignNotFound {

	return &SignNotFound{}
}

// WithPayload adds the payload to the sign not found response
func (o *SignNotFound) WithPayload(payload *models.Error) *SignNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign not found response
func (o *SignNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignUnprocessableEntityCode is the HTTP code returned for type SignUnprocessableEntity
const SignUnprocessableEntityCode int = 422

/*
SignUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response signUnprocessableEntity
*/
type SignUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignUnprocessableEntity creates SignUnprocessableEntity with default headers values
func NewSignUnprocessableEntity() *SignUnprocessableEntity {

	return &SignUnprocessableEntity{}
}

// WithPayload adds the payload to the sign unprocessable entity response
func (o *SignUnprocessableEntity) WithPayload(payload *models.Error) *SignUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign unprocessable entity response
func (o *SignUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignInternalServerErrorCode is the HTTP code returned for type SignInternalServerError
const SignInternalServerErrorCode int = 500

/*
SignInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response signInternalServerError
*/
type SignInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSignInternalServerError creates SignInternalServerError with default headers values
func NewSignInternalServerError() *SignInternalServerError {

	return &SignInternalServerError{}
}

// WithPayload adds the payload to the sign internal server error response
func (o *SignInternalServerError) WithPayload(payload *models.Error) *SignInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign internal server error response
func (o *SignInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
