// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TransferCoinHandlerFunc turns a function with the right signature into a transfer coin handler
type TransferCoinHandlerFunc func(TransferCoinParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TransferCoinHandlerFunc) Handle(params TransferCoinParams) middleware.Responder {
	return fn(params)
}

// TransferCoinHandler interface for that can handle valid transfer coin params
type TransferCoinHandler interface {
	Handle(TransferCoinParams) middleware.Responder
}

// NewTransferCoin creates a new http.Handler for the transfer coin operation
func NewTransferCoin(ctx *middleware.Context, handler TransferCoinHandler) *TransferCoin {
	return &TransferCoin{Context: ctx, Handler: handler}
}

/*
	TransferCoin swagger:route POST /api/accounts/{nickname}/transfer transferCoin

Transfer coins from the account associated with the provided nickname in the path. Will ask the user to enter its account password.
*/
type TransferCoin struct {
	Context *middleware.Context
	Handler TransferCoinHandler
}

func (o *TransferCoin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTransferCoinParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
