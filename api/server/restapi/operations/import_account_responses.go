// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra-plugin-wallet/api/server/models"
)

// ImportAccountOKCode is the HTTP code returned for type ImportAccountOK
const ImportAccountOKCode int = 200

/*
ImportAccountOK Account imported.

swagger:response importAccountOK
*/
type ImportAccountOK struct {

	/*
	  In: Body
	*/
	Payload *models.Account `json:"body,omitempty"`
}

// NewImportAccountOK creates ImportAccountOK with default headers values
func NewImportAccountOK() *ImportAccountOK {

	return &ImportAccountOK{}
}

// WithPayload adds the payload to the import account o k response
func (o *ImportAccountOK) WithPayload(payload *models.Account) *ImportAccountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import account o k response
func (o *ImportAccountOK) SetPayload(payload *models.Account) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportAccountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportAccountBadRequestCode is the HTTP code returned for type ImportAccountBadRequest
const ImportAccountBadRequestCode int = 400

/*
ImportAccountBadRequest Bad request.

swagger:response importAccountBadRequest
*/
type ImportAccountBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportAccountBadRequest creates ImportAccountBadRequest with default headers values
func NewImportAccountBadRequest() *ImportAccountBadRequest {

	return &ImportAccountBadRequest{}
}

// WithPayload adds the payload to the import account bad request response
func (o *ImportAccountBadRequest) WithPayload(payload *models.Error) *ImportAccountBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import account bad request response
func (o *ImportAccountBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportAccountBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportAccountUnauthorizedCode is the HTTP code returned for type ImportAccountUnauthorized
const ImportAccountUnauthorizedCode int = 401

/*
ImportAccountUnauthorized Unauthorized - The request requires user authentication.

swagger:response importAccountUnauthorized
*/
type ImportAccountUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportAccountUnauthorized creates ImportAccountUnauthorized with default headers values
func NewImportAccountUnauthorized() *ImportAccountUnauthorized {

	return &ImportAccountUnauthorized{}
}

// WithPayload adds the payload to the import account unauthorized response
func (o *ImportAccountUnauthorized) WithPayload(payload *models.Error) *ImportAccountUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import account unauthorized response
func (o *ImportAccountUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportAccountUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportAccountUnprocessableEntityCode is the HTTP code returned for type ImportAccountUnprocessableEntity
const ImportAccountUnprocessableEntityCode int = 422

/*
ImportAccountUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response importAccountUnprocessableEntity
*/
type ImportAccountUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportAccountUnprocessableEntity creates ImportAccountUnprocessableEntity with default headers values
func NewImportAccountUnprocessableEntity() *ImportAccountUnprocessableEntity {

	return &ImportAccountUnprocessableEntity{}
}

// WithPayload adds the payload to the import account unprocessable entity response
func (o *ImportAccountUnprocessableEntity) WithPayload(payload *models.Error) *ImportAccountUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import account unprocessable entity response
func (o *ImportAccountUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportAccountUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportAccountInternalServerErrorCode is the HTTP code returned for type ImportAccountInternalServerError
const ImportAccountInternalServerErrorCode int = 500

/*
ImportAccountInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response importAccountInternalServerError
*/
type ImportAccountInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportAccountInternalServerError creates ImportAccountInternalServerError with default headers values
func NewImportAccountInternalServerError() *ImportAccountInternalServerError {

	return &ImportAccountInternalServerError{}
}

// WithPayload adds the payload to the import account internal server error response
func (o *ImportAccountInternalServerError) WithPayload(payload *models.Error) *ImportAccountInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import account internal server error response
func (o *ImportAccountInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportAccountInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
