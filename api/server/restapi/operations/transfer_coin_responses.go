// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/station-massa-wallet/api/server/models"
)

// TransferCoinOKCode is the HTTP code returned for type TransferCoinOK
const TransferCoinOKCode int = 200

/*
TransferCoinOK Operation id

swagger:response transferCoinOK
*/
type TransferCoinOK struct {

	/*
	  In: Body
	*/
	Payload *models.OperationResponse `json:"body,omitempty"`
}

// NewTransferCoinOK creates TransferCoinOK with default headers values
func NewTransferCoinOK() *TransferCoinOK {

	return &TransferCoinOK{}
}

// WithPayload adds the payload to the transfer coin o k response
func (o *TransferCoinOK) WithPayload(payload *models.OperationResponse) *TransferCoinOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transfer coin o k response
func (o *TransferCoinOK) SetPayload(payload *models.OperationResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransferCoinOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransferCoinBadRequestCode is the HTTP code returned for type TransferCoinBadRequest
const TransferCoinBadRequestCode int = 400

/*
TransferCoinBadRequest Bad request.

swagger:response transferCoinBadRequest
*/
type TransferCoinBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransferCoinBadRequest creates TransferCoinBadRequest with default headers values
func NewTransferCoinBadRequest() *TransferCoinBadRequest {

	return &TransferCoinBadRequest{}
}

// WithPayload adds the payload to the transfer coin bad request response
func (o *TransferCoinBadRequest) WithPayload(payload *models.Error) *TransferCoinBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transfer coin bad request response
func (o *TransferCoinBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransferCoinBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransferCoinUnauthorizedCode is the HTTP code returned for type TransferCoinUnauthorized
const TransferCoinUnauthorizedCode int = 401

/*
TransferCoinUnauthorized Unauthorized - The request requires user authentication.

swagger:response transferCoinUnauthorized
*/
type TransferCoinUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransferCoinUnauthorized creates TransferCoinUnauthorized with default headers values
func NewTransferCoinUnauthorized() *TransferCoinUnauthorized {

	return &TransferCoinUnauthorized{}
}

// WithPayload adds the payload to the transfer coin unauthorized response
func (o *TransferCoinUnauthorized) WithPayload(payload *models.Error) *TransferCoinUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transfer coin unauthorized response
func (o *TransferCoinUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransferCoinUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransferCoinNotFoundCode is the HTTP code returned for type TransferCoinNotFound
const TransferCoinNotFoundCode int = 404

/*
TransferCoinNotFound Account Not found.

swagger:response transferCoinNotFound
*/
type TransferCoinNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransferCoinNotFound creates TransferCoinNotFound with default headers values
func NewTransferCoinNotFound() *TransferCoinNotFound {

	return &TransferCoinNotFound{}
}

// WithPayload adds the payload to the transfer coin not found response
func (o *TransferCoinNotFound) WithPayload(payload *models.Error) *TransferCoinNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transfer coin not found response
func (o *TransferCoinNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransferCoinNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransferCoinUnprocessableEntityCode is the HTTP code returned for type TransferCoinUnprocessableEntity
const TransferCoinUnprocessableEntityCode int = 422

/*
TransferCoinUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response transferCoinUnprocessableEntity
*/
type TransferCoinUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransferCoinUnprocessableEntity creates TransferCoinUnprocessableEntity with default headers values
func NewTransferCoinUnprocessableEntity() *TransferCoinUnprocessableEntity {

	return &TransferCoinUnprocessableEntity{}
}

// WithPayload adds the payload to the transfer coin unprocessable entity response
func (o *TransferCoinUnprocessableEntity) WithPayload(payload *models.Error) *TransferCoinUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transfer coin unprocessable entity response
func (o *TransferCoinUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransferCoinUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransferCoinInternalServerErrorCode is the HTTP code returned for type TransferCoinInternalServerError
const TransferCoinInternalServerErrorCode int = 500

/*
TransferCoinInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response transferCoinInternalServerError
*/
type TransferCoinInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransferCoinInternalServerError creates TransferCoinInternalServerError with default headers values
func NewTransferCoinInternalServerError() *TransferCoinInternalServerError {

	return &TransferCoinInternalServerError{}
}

// WithPayload adds the payload to the transfer coin internal server error response
func (o *TransferCoinInternalServerError) WithPayload(payload *models.Error) *TransferCoinInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transfer coin internal server error response
func (o *TransferCoinInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransferCoinInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
