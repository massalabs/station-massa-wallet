// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WebHandlerFunc turns a function with the right signature into a web handler
type WebHandlerFunc func(WebParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WebHandlerFunc) Handle(params WebParams) middleware.Responder {
	return fn(params)
}

// WebHandler interface for that can handle valid web params
type WebHandler interface {
	Handle(WebParams) middleware.Responder
}

// NewWeb creates a new http.Handler for the web operation
func NewWeb(ctx *middleware.Context, handler WebHandler) *Web {
	return &Web{Context: ctx, Handler: handler}
}

/*
	Web swagger:route GET /web/{resource} web

Web web API
*/
type Web struct {
	Context *middleware.Context
	Handler WebHandler
}

func (o *Web) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewWebParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
