// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/station-massa-wallet/api/server/models"
)

// UpdateAccountOKCode is the HTTP code returned for type UpdateAccountOK
const UpdateAccountOKCode int = 200

/*
UpdateAccountOK Account edited successfully.

swagger:response updateAccountOK
*/
type UpdateAccountOK struct {

	/*
	  In: Body
	*/
	Payload *models.Account `json:"body,omitempty"`
}

// NewUpdateAccountOK creates UpdateAccountOK with default headers values
func NewUpdateAccountOK() *UpdateAccountOK {

	return &UpdateAccountOK{}
}

// WithPayload adds the payload to the update account o k response
func (o *UpdateAccountOK) WithPayload(payload *models.Account) *UpdateAccountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update account o k response
func (o *UpdateAccountOK) SetPayload(payload *models.Account) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAccountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAccountBadRequestCode is the HTTP code returned for type UpdateAccountBadRequest
const UpdateAccountBadRequestCode int = 400

/*
UpdateAccountBadRequest Bad request.

swagger:response updateAccountBadRequest
*/
type UpdateAccountBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateAccountBadRequest creates UpdateAccountBadRequest with default headers values
func NewUpdateAccountBadRequest() *UpdateAccountBadRequest {

	return &UpdateAccountBadRequest{}
}

// WithPayload adds the payload to the update account bad request response
func (o *UpdateAccountBadRequest) WithPayload(payload *models.Error) *UpdateAccountBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update account bad request response
func (o *UpdateAccountBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAccountBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAccountNotFoundCode is the HTTP code returned for type UpdateAccountNotFound
const UpdateAccountNotFoundCode int = 404

/*
UpdateAccountNotFound Not found.

swagger:response updateAccountNotFound
*/
type UpdateAccountNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateAccountNotFound creates UpdateAccountNotFound with default headers values
func NewUpdateAccountNotFound() *UpdateAccountNotFound {

	return &UpdateAccountNotFound{}
}

// WithPayload adds the payload to the update account not found response
func (o *UpdateAccountNotFound) WithPayload(payload *models.Error) *UpdateAccountNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update account not found response
func (o *UpdateAccountNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAccountNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAccountUnprocessableEntityCode is the HTTP code returned for type UpdateAccountUnprocessableEntity
const UpdateAccountUnprocessableEntityCode int = 422

/*
UpdateAccountUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response updateAccountUnprocessableEntity
*/
type UpdateAccountUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateAccountUnprocessableEntity creates UpdateAccountUnprocessableEntity with default headers values
func NewUpdateAccountUnprocessableEntity() *UpdateAccountUnprocessableEntity {

	return &UpdateAccountUnprocessableEntity{}
}

// WithPayload adds the payload to the update account unprocessable entity response
func (o *UpdateAccountUnprocessableEntity) WithPayload(payload *models.Error) *UpdateAccountUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update account unprocessable entity response
func (o *UpdateAccountUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAccountUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAccountInternalServerErrorCode is the HTTP code returned for type UpdateAccountInternalServerError
const UpdateAccountInternalServerErrorCode int = 500

/*
UpdateAccountInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response updateAccountInternalServerError
*/
type UpdateAccountInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateAccountInternalServerError creates UpdateAccountInternalServerError with default headers values
func NewUpdateAccountInternalServerError() *UpdateAccountInternalServerError {

	return &UpdateAccountInternalServerError{}
}

// WithPayload adds the payload to the update account internal server error response
func (o *UpdateAccountInternalServerError) WithPayload(payload *models.Error) *UpdateAccountInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update account internal server error response
func (o *UpdateAccountInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAccountInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
