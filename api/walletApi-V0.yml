consumes:
  - application/json
info:
  description: Thyra plugin - Massa Wallet
  title: massa-wallet
  version: 0.0.1
host: localhost:8080
produces:
  - application/json
schemes:
  - http
swagger: "2.0"
paths:
  /:
    get:
      operationId: defaultPage
      responses:
        "301":
          description: Move to the default endpoint
  /web-app/{resource}:
    get:
      operationId: webApp
      description: Route for the ReactJS front-end web application (in /web-frontend)
      produces:
        - application/json
        - text/javascript
        - text/html
        - text/css
        - text/webp
        - image/png
      parameters:
        - in: path
          name: resource
          type: string
          default: index.html
          required: true
          description: Website resource.
      responses:
        "200":
          description: Page found
        "404":
          description: Resource not found.
          schema:
            $ref: "#/definitions/Error"
  /web/{resource}:
    get:
      operationId: web
      description: Route for legacy web application (in /web directory)
      produces:
        - application/json
        - text/javascript
        - text/html
        - text/css
        - text/webp
        - image/png
      parameters:
        - in: path
          name: resource
          type: string
          default: index.html
          required: true
          description: Website resource.
      responses:
        "200":
          description: Page found
        "404":
          description: Resource not found.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts:
    get:
      operationId: restAccountList
      description: Get all the accounts.
      produces:
        - application/json
      responses:
        "200":
          description: Accounts retrieved
          schema:
            type: array
            items:
              $ref: "#/definitions/Account"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}:
    get:
      operationId: restAccountGet
      description: Get the account by nickname given in path, with the option to return the ciphered private key.
      parameters:
        - $ref: "#/parameters/nickname"
        - $ref: "#/parameters/ciphered"
      produces:
        - application/json
      responses:
        "200":
          description: Account retrieved.
          schema:
            $ref: "#/definitions/Account"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Unauthorized - The request requires user authentication. Only possible if ciphered is false.
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Not found.
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
    post:
      operationId: restCreateAccount
      description: Generate a new account with new random keys
      parameters:
        - $ref: "#/parameters/nickname"
      produces:
        - application/json
      responses:
        "200":
          description: New account created.
          schema:
            $ref: "#/definitions/Account"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Unauthorized - The request requires user authentication. Only if no correlationId is provided.
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
    delete:
      operationId: restAccountDelete
      description: Delete the account by nickname given in path.
      parameters:
        - $ref: "#/parameters/nickname"
      produces:
        - application/json
      responses:
        "204":
          description: Account deletion request has been taken into account, the user will be prompt to confirm the deletion.
          schema:
            $ref: "#/definitions/Account"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Not found.
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}/import:
    post:
      operationId: restAccountImport
      description: Import a new account (not implemented, see https://github.com/massalabs/thyra-plugin-wallet/pull/120)
      produces:
        - application/json   
      parameters:
        - $ref: "#/parameters/nickname"
      responses:
        "204":
          description: Account imported.
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}/exportFile:
    get:
      operationId: restAccountExportFile
      description: Download the account file corresponding to the nickname given in path.
      produces:
        - application/octet-stream
      parameters:
        - $ref: "#/parameters/nickname"
      responses:
        200:
          description: Download the account file
          schema:
            type: file
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Not found.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}/signOperation:
    post:
      operationId: restAccountSignOperation
      description: Sign an operation with the account by nickname given in path.
      parameters:
        - $ref: "#/parameters/nickname"
        - in: body
          name: body
          required: true
          x-nullable: false
          schema:
            $ref: "#/definitions/Operation"
      produces:
        - application/json
      responses:
        "200":
          description: Signature.
          schema:
            $ref: "#/definitions/Signature"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Unauthorized - The request requires user authentication. Only if no correlationId is provided.
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Account Not found.
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"

parameters:
  nickname:
    in: path
    name: nickname
    type: string
    required: true
    description: Account's short name.
    x-nullable: false
  ciphered:
    in: query
    name: ciphered
    type: boolean
    required: false
    default: true
    description: whether to return the data ciphered or not
    x-nullable: true
definitions:
  Error:
    type: object
    description: Error object.
    required:
      - code
      - message
    properties:
      code:
        description: error code.
        type: string
        x-nullable: false
      message:
        description: error message.
        type: string
        x-nullable: false
  Operation:
    type: object
    required:
      - operation
    properties:
      operation:
        description: Serialized attributes of the operation to be signed with the key pair corresponding to the given nickname.
        type: string
        format: byte
      batch:
        description: A boolean property that indicates whether the sign operation is part of a batch of operations. Set to true if this operation is part of a batch, otherwise set to false.
        type: boolean
      correlationId:
        $ref: "#/definitions/CorrelationId"
  Signature:
    type: object
    description: Signature of a sent operation.
    required:
      - signature
      - publicKey
    properties:
      publicKey:
        description: Public part of the key pair used to sign the operation.
        type: string
        x-nullable: false
      signature:
        description: Hash of the operation attributes encrypted with the private part of the key pair.
        type: string
        format: byte
        x-nullable: false
      correlationId:
        $ref: "#/definitions/CorrelationId"
  CorrelationId:
    description: Correlation id of the operation batch
    type: string
    format: byte
  Nickname:
    description: Account's short name.
    type: string
    x-nullable: false
  Account:
    type: object
    description: Account object (V0).
    required:
      - nickname
      - address
      - keyPair
    properties:
      nickname:
        $ref: "#/definitions/Nickname"
      address:
        description: Account's address.
        type: string
        x-nullable: false
      keyPair:
        description: Account's key pair.
        type: object
        x-nullable: false
        required:
          - privateKey
          - publicKey
          - salt
          - nonce
        properties:
          privateKey:
            description: Key pair's private key.
            type: string
            format: base58check
            x-nullable: false
          publicKey:
            description: Key pair's public key.
            type: string
            format: base58check
            x-nullable: false
          salt:
            description: Salt used by the PBKDF that generates the secret key used to protect the key pair's private key.
            type: string
            format: base58check
            x-nullable: false
          nonce:
            description: Nonce used by the AES-GCM algorithm used to protect the key pair's private key.
            type: string
            format: base58check
            x-nullable: false
