consumes:
  - application/json
info:
  description: MassaStation plugin - Wallet
  title: massa-wallet
  version: 0.0.1
host: localhost:8080
produces:
  - application/json
schemes:
  - http
swagger: "2.0"
paths:
  /:
    get:
      operationId: defaultPage
      responses:
        "301":
          description: Move to the default endpoint
  /web-app/{resource}:
    get:
      operationId: webApp
      description: Route for the ReactJS front-end web application (in /web-frontend)
      produces:
        - application/json
        - text/javascript
        - text/html
        - text/css
        - text/webp
        - image/png
      parameters:
        - in: path
          name: resource
          type: string
          default: index.html
          required: true
          description: Website resource.
      responses:
        200:
          description: Page found
        404:
          description: Resource not found.
          schema:
            $ref: "#/definitions/Error"
  /api/config:
    get:
      operationId: GetConfig
      description: Get wallet config
      produces:
        - application/json
      responses:
        200:
          description: Config retrieved.
          schema:
            $ref: "#/definitions/Config"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts:
    get:
      operationId: AccountList
      description: Get all the accounts.
      produces:
        - application/json
      responses:
        200:
          description: Accounts retrieved
          schema:
            type: array
            items:
              $ref: "#/definitions/Account"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
    put:
      operationId: ImportAccount
      description: Import a new account
      produces:
        - application/json
      responses:
        200:
          description: Account imported.
          schema:
            $ref: "#/definitions/Account"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}:
    get:
      operationId: GetAccount
      description: Get the account associated with the provided nickname in the path, with the option to return the ciphered private key.
      parameters:
        - $ref: "#/parameters/nickname"
        - $ref: "#/parameters/ciphered"
      produces:
        - application/json
      responses:
        200:
          description: Account retrieved.
          schema:
            $ref: "#/definitions/Account"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication. Only possible if ciphered is false.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Not found.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
    post:
      operationId: CreateAccount
      description: Generate a new account with new random keys
      parameters:
        - $ref: "#/parameters/nickname"
      produces:
        - application/json
      responses:
        200:
          description: New account created.
          schema:
            $ref: "#/definitions/Account"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
    delete:
      operationId: DeleteAccount
      description: Delete the account associated with the provided nickname in the path, the user will be prompt to confirm the deletion.
      parameters:
        - $ref: "#/parameters/nickname"
      produces:
        - application/json
      responses:
        204:
          description: Account deleted successfully.
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Not found.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
    put:
      operationId: UpdateAccount
      description: Update the account associated with the provided nickname in the path.
      parameters:
        - $ref: "#/parameters/nickname"
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UpdateAccountRequest"
      produces:
        - application/json
      responses:
        200:
          description: Account edited successfully.
          schema:
            $ref: "#/definitions/Account"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Not found.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}/exportFile:
    get:
      operationId: ExportAccountFile
      description: Download the account file corresponding to the nickname given in path.
      produces:
        - application/octet-stream
      parameters:
        - $ref: "#/parameters/nickname"
      responses:
        200:
          description: Download the account file
          schema:
            type: file
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Not found.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"

  /api/accounts/{nickname}/signrules:
    post:
      operationId: AddSignRule
      description: Create a new sign rule for the account associated with the provided nickname.
      parameters:
        - $ref: "#/parameters/nickname"
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/AddSignRule"
      produces:
        - application/json
      responses:
        200:
          description: signRule Id.
          schema:
            $ref: "#/definitions/AddSignRuleResponse"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Account Not found.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"

  /api/accounts/{nickname}/signrules/{ruleId}:
    delete:
      operationId: DeleteSignRule
      description: Delete a sign rule for the account associated with the provided nickname by its ID.
      parameters:
        - $ref: "#/parameters/nickname"
        - $ref: "#/parameters/ruleId"
      produces:
        - application/json
      responses:
        200:
          description: Sign rule deleted successfully.
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Account or Rule Not found.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"

    put:
      operationId: UpdateSignRule
      description: Update an existing sign rule for the account associated with the provided nickname by its ID.
      parameters:
        - $ref: "#/parameters/nickname"
        - $ref: "#/parameters/ruleId"
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UpdateSignRule"
      produces:
        - application/json
      responses:
        200:
          description: Sign rule updated successfully.
          schema:
            $ref: "#/definitions/UpdateSignRuleResponse"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Account or Rule Not found.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"

  /api/accounts/{nickname}/sign:
    post:
      operationId: Sign
      description: Sign an operation or a message using the account associated with the provided nickname in the path.
      parameters:
        - $ref: "#/parameters/nickname"
        - in: body
          name: body
          required: true
          x-nullable: false
          schema:
            $ref: "#/definitions/SignRequest"
        - in: query
          name: allow-fee-edition
          type: boolean
          required: false
          default: false
          description: Whether to allow user to edit the fee value in the sign prompt.
          x-nullable: true
      produces:
        - application/json    
      responses:
        200:
          description: Returns the signature, public key.
          schema:
            $ref: "#/definitions/SignResponse"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Account Not found.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}/signMessage:
    post:
      operationId: SignMessage
      description: Sign a message using the account associated with the provided nickname in the path.
      parameters:
        - $ref: "#/parameters/nickname"
        - in: body
          name: body
          required: true
          x-nullable: false
          schema:
            $ref: "#/definitions/SignMessageRequest"
      produces:
        - application/json
      responses:
        200:
          description: Returns the signature, public key.
          schema:
            $ref: "#/definitions/SignResponse"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Account Not found.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"

  /api/accounts/{nickname}/transfer:
    post:
      operationId: TransferCoin
      description: Transfer coins from the account associated with the provided nickname in the path. Will ask the user to enter its account password.
      parameters:
        - $ref: "#/parameters/nickname"
        - in: body
          name: body
          required: true
          x-nullable: false
          schema:
            $ref: "#/definitions/TransferRequest"
      produces:
        - application/json
      responses:
        200:
          description: Operation id
          schema:
            $ref: "#/definitions/OperationResponse"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Account Not found.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}/rolls:
    post:
      operationId: TradeRolls
      description: Buy or sell rolls.
      parameters:
        - $ref: "#/parameters/nickname"
        - in: body
          name: body
          required: true
          x-nullable: false
          schema:
            $ref: "#/definitions/RollsRequest"
      responses:
        200:
          description: Operation id
          schema:
            $ref: "#/definitions/OperationResponse"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Account Not found.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}/backup:
    post:
      operationId: BackupAccount
      description: Export the account associated with the provided nickname in the path. Will ask the user to enter its account password.
      parameters:
        - $ref: "#/parameters/nickname"
      produces:
        - application/json
      responses:
        204:
          description: Account backup
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Unauthorized - The request requires user authentication.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Account Not found.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
  /api/accounts/{nickname}/assets:
    post:
      operationId: AddAsset
      description: Add token information and persist it for future use.
      produces:
        - application/json
      parameters:
        - in: path
          name: nickname
          type: string
          required: true
          description: The nickname of the account to add the asset to.
        - in: query
          name: assetAddress
          type: string
          pattern: ^AS[0-9a-zA-Z]+$
          required: true
          description: The asset address (token address) to add to the account. It must start with "AS" and contain only alphanumeric characters.
      responses:
        201:
          description: Asset information retrieved successfully.
          schema:
            $ref: "#/definitions/AssetInfo"
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        422:
          description: Unprocessable Entity - the provided addresses is not valid.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Not Found - The asset with the provided address was not found in the network.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"
    get:
      operationId: GetAllAssets
      description: Get all assets with their balance.
      produces:
        - application/json
      parameters:
        - in: path
          name: nickname
          type: string
          required: true
          description: The nickname of the wallet to retrieve assets for.
      responses:
        200:
          description: All assets retrieved successfully.
          schema:
            type: array
            items:
              $ref: "#/definitions/AssetInfoWithBalance"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"

    delete:
      operationId: DeleteAsset
      description: Delete token information from an account.
      produces:
        - application/json
      parameters:
        - in: path
          name: nickname
          type: string
          required: true
          description: The nickname of the account from which to delete the asset.
        - in: query
          name: assetAddress
          type: string
          pattern: ^AS[0-9a-zA-Z]+$
          required: true
          description: The asset address (token address) to delete from the account. It must start with "AS" and contain only alphanumeric characters.
      responses:
        204:
          description: Asset information deleted successfully.
        400:
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Not found - At least one of the provided addresses is not valid.
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error - The server has encountered a situation it does not know how to handle.
          schema:
            $ref: "#/definitions/Error"

parameters:
  nickname:
    in: path
    name: nickname
    type: string
    required: true
    description: Account's short name.
    x-nullable: false
  ciphered:
    in: query
    name: ciphered
    type: boolean
    required: false
    default: true
    description: whether to return the data ciphered or not
    x-nullable: true
  ruleId:
    name: ruleId
    in: path
    required: true
    type: string
    description: The ID of the sign rule
    x-nullable: false

definitions:
  Error:
    type: object
    description: Error object.
    required:
      - code
      - message
    properties:
      code:
        description: error code.
        type: string
        x-nullable: false
      message:
        description: error message.
        type: string
        x-nullable: false
  SignRequest:
    type: object
    required:
      - operation
      - chainId
    properties:
      description:
        type: string
        maxLength: 280
        description: Description text of what is being signed (optional)
      operation:
        description: Serialized attributes of the operation to be signed with the key pair corresponding to the given nickname.
        type: string
        format: byte
      chainId:
        type: integer
        description: The chain id of the network to which the operation will be sent.

  AddSignRule:
    type: object
    required:
      - ruleType
      - contract
      - enabled
    properties:
      description:
        type: string
        maxLength: 280
        description: Description text of what is being done (optional)
      ruleType:
        $ref: "#/definitions/RuleType"
      name:
        description: "The name of the rule."
        type: "string"
        maxLength: 100
      contract:
        description: "The contract to which the rule applies."
        type: "string"
      enabled:
        description: "Whether the rule is enabled or not."
        type: "boolean"

  RuleType:
    description: "An enumeration of the different types of rules."
    type: string
    enum:
      - DISABLE_PASSWORD_PROMPT
      - AUTO_SIGN
    x-nullable: false

  AddSignRuleResponse:
      type: object
      properties:
        id:
          type: string
          x-nullable: false
          readOnly: true

  UpdateSignRule:
    type: object
    required:
      - ruleType
      - contract
      - enabled
    properties:
      description:
        type: string
        maxLength: 280
        description: Description text of what is being updated (optional)
      ruleType:
        $ref: "#/definitions/RuleType"
      name:
        description: "The name of the rule."
        type: "string"
        maxLength: 100
      contract:
        description: "The contract to which the rule applies. Use wildcard (*) to apply the rule for contracts."
        type: "string"
      enabled:
        description: "Whether the rule is enabled or not."
        type: "boolean"

  UpdateSignRuleResponse:
    type: object
    properties:
      id:
        type: string
        x-nullable: false
        readOnly: true

  SignMessageRequest:
    type: object
    properties:
      description:
        type: string
        maxLength: 280
        description: Description text of what is being signed (optional)
      message:
        type: string
        description: The message to sign.
      DisplayData:
        type: boolean
        default: true
        description: A boolean indicating whether to display data.

  TransferRequest:
    type: object
    properties:
      fee:
        $ref: "#/definitions/Amount"
      amount:
        $ref: "#/definitions/Amount"
      recipientAddress:
        type: string
    required:
      - fee
      - amount
      - recipientAddress
  RollsRequest:
    type: object
    properties:
      fee:
        $ref: "#/definitions/Amount"
      amount:
        $ref: "#/definitions/Amount"
      side:
        type: string
        enum: [buy, sell]
    required:
      - fee
      - amount
      - side
  UpdateAccountRequest:
    type: object
    description: Account object (V0).
    required:
      - nickname
    properties:
      nickname:
        $ref: "#/definitions/Nickname"
      candidateBalance:
        $ref: "#/definitions/Amount"
      balance:
        $ref: "#/definitions/Amount"
      address:
        $ref: "#/definitions/Address"
      keyPair:
        $ref: "#/definitions/KeyPair"
  OperationResponse:
    type: object
    properties:
      operationId:
        type: string
        readOnly: true
  SignResponse:
    type: object
    description: Signature of a sent operation.
    properties:
      publicKey:
        description: Public part of the key pair used to sign the operation.
        type: string
        x-nullable: false
        readOnly: true
      signature:
        description: Hash of the operation attributes encrypted with the private part of the key pair.
        type: string
        format: byte
        x-nullable: false
        readOnly: true
      operation:
        description: The modified operation (usr can change the fees).
        type: string
        format: byte
        x-nullable: false
        readOnly: true

  Nickname:
    description: Account's short name.
    type: string
    x-nullable: false
  Amount:
    description: Mas amount in nanoMassa.
    type: string
    x-nullable: false
  Account:
    type: object
    description: Account object (V0).
    required:
      - nickname
      - address
      - keyPair
      - balance
      - candidateBalance
    properties:
      nickname:
        $ref: "#/definitions/Nickname"
      candidateBalance:
        $ref: "#/definitions/Amount"
      balance:
        $ref: "#/definitions/Amount"
      address:
        $ref: "#/definitions/Address"
      keyPair:
        $ref: "#/definitions/KeyPair"
      status:
        type: string
        enum:
          - ok
          - corrupted
  Address:
    description: Account's address.
    type: string
    x-nullable: false
  KeyPair:
    description: Account's key pair.
    type: object
    x-nullable: false
    required:
      - privateKey
      - publicKey
      - salt
      - nonce
    properties:
      privateKey:
        description: Key pair's private key.
        type: string
        format: base58check
        x-nullable: false
      publicKey:
        description: Key pair's public key.
        type: string
        format: base58check
        x-nullable: false
      salt:
        description: Salt used by the PBKDF that generates the secret key used to protect the key pair's private key.
        type: string
        format: base58check
        x-nullable: false
      nonce:
        description: Nonce used by the AES-GCM algorithm used to protect the key pair's private key.
        type: string
        format: base58check
        x-nullable: false
  AssetInfo:
    description: Token informations
    type: object
    properties:
      address:
        type: string
      name:
        type: string
      symbol:
        type: string
      decimals:
        type: integer
        minimum: 0
      chainID:
        type: integer
        minimum: 0
    x-nullable: false
  AssetInfoWithBalance:
    allOf:
      - $ref: "#/definitions/AssetInfo"
      - type: object
        properties:
          balance:
            type: string
          isDefault:
            type: boolean
          dollarValue:
            type: string

  SignRule:
    type: object
    description: Account Sign rule.
    properties:
      id:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      contract:
        type: string
        x-nullable: true
      enabled:
        type: boolean
        default: true
      ruleType:
        $ref: "#/definitions/RuleType"
    required:
      - ruleType

  AccountConfig:
    type: object
    description: Wallet Account Config.
    properties:
      signRules:
        type: array
        items:
          $ref: "#/definitions/SignRule"
    required:
      - signRules

  Config:
    type: object
    description: Wallet Config.
    properties:
      accounts:
        type: object
        additionalProperties:
          $ref: "#/definitions/AccountConfig"
    x-nullable: false
